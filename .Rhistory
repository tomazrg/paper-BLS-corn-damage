sn <= 0.25 ~"Low severity"))
class <- big %>%
filter(C <= 105) %>%
filter(lambda >= 0.4) %>%
filter(lambda <= 0.8) %>%
filter(C >= 15) %>%
group_by(lambda, C, class) %>%
summarise(n = n(), sumn = sum(profit), prob = sumn / n, .groups = 'drop') %>%
ungroup()
gc()
library(viridis)
heat_graphic = class %>%
filter(!is.na(class)) %>%
ggplot( aes(as.factor(lambda * 100), as.factor(C), fill = prob)) +
geom_tile(size = 0.5, color = "white") +
#geom_text(aes(label = paste(round(prob, 2), sep = "")),
# size = 4, colour = "white")+
scale_fill_viridis_b(option = "E", direction =  -1)+
#scale_fill_viridis(discrete = T, option = "E") +
guides(color = guide_legend(override.aes = list(size = 2))) +
labs(x = "Treatment efficacy (%)",
y = "Treatment cost (USD/ha)",
fill = "Pr(I \u2265 C)",
color = "") +
facet_wrap(vars(class), ncol =1) +
ggthemes::theme_few()+
theme(strip.text = element_text(face = "bold", size = 14),
text = element_text(face = "bold", size = 14),
legend.position = "right")
gc()
low_class = class %>%
filter(class == "Low severity")
min(low_class$prob)
max(low_class$prob)
mean(low_class$prob)
low_class %>%
filter(C <= 15)
high_class = class %>%
filter(class == "High severity")
min(high_class$prob)
max(high_class$prob)
mean(high_class$prob)
overall = big %>%
filter(C <= 105) %>%
filter(C >= 15) %>%
#mutate(sev_class = " Overall") %>%
dplyr::group_by(lambda,class) %>%
summarise(yield_gain_median = median(yield_gain),
yield_gain_mean = mean(yield_gain),
up_95 = quantile(yield_gain, 0.975),
low_95 = quantile(yield_gain, 0.025),
up_75 = quantile(yield_gain, 0.75),
low_75 = quantile(yield_gain, 0.25))
gain_graphic = overall %>%
ggplot(aes(lambda*100,yield_gain_mean))+
geom_line(aes(lambda*100, low_95),
linetype = 2,
size = 1,
fill = NA, color = "black")+
geom_line(aes(lambda*100, up_95),
linetype = 2,
size = 1,
fill = NA,color = "black")+
geom_line(size = 1.4, aes(lambda*100,yield_gain_median), color = "#ffc425")+
#scale_y_continuous(breaks = c(0, 500, 1000, 1500,2000,
#                             2500, 3000),
#                 limits = c(0, 3000))+
#scale_x_continuous(breaks = c(40,50,60,70,80), limits = c(40, 80))+
#scale_color_viridis_d()+
#scale_color_manual(values = c('steelblue', '#9ccb86', 'darkred'))+
ggthemes::theme_few()+
facet_wrap(~class, ncol = 1)+
#facet_wrap(~class+class2)+
labs(x = "Treatment efficacy (%)",
y = "Yield difference (kg/ha)",
color = "Tolerance level",
linetype = "", fill = "")+
theme(text = element_text(face = "bold", size = 14),
strip.text = element_text(size = 14),
legend.position = "top")
library(cowplot)
(gain_graphic+heat_graphic) +
plot_annotation(tag_levels = "a", tag_prefix = "(", tag_suffix = ")")&
theme(plot.tag = element_text(face = "bold", size = 16))
ggsave("fig/break-even_gain.png", dpi = 600, bg = "white",
width = 8, height = 6)
b0_graphic
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "steelblue", alpha= .5)+
#scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
library(dplyr)
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "steelblue", alpha= .5)+
#scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
library(tidyverse)
library(ggplot2)
library(dplyr)
library(gsheet)
library(lme4)
library(cowplot)
library(readxl)
library(writexl)
library(ggdist)
#write_csv(big_one_df,"data/big_one_df.csv")
big_one_df = read_csv("data/big_one_df.csv")
sn = big_one_df %>%
ggplot(aes(sn))+
geom_histogram(color = "white", fill = "steelblue", bins = 10, alpha= .5)+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(face = "bold",size = 16))+
labs(y = "Frequency",
x = "BLS severity (%)")+
ggthemes::theme_few()
sn
sn = big_one_df %>%
ggplot(aes(sn))+
geom_histogram(color = "white", fill = "steelblue", bins = 10)+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(face = "bold",size = 16))+
labs(y = "Frequency",
x = "BLS severity (%)")+
ggthemes::theme_few()
sn
ggsave("fig/severity_simu.png", dpi = 600, bg = "white")
ggsave("fig/severity_simu.png", dpi = 600, bg = "white", width = 8)
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "steelblue")+
#scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
b0_graphic
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "darkorange")+
#scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
b0_graphic
sn
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "darkorange")+
#scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
b0_graphic
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "darkorange")+
scale_x_continuous(breaks = c(6000,7000,8000,9000,10000,11000,12000,13000), limits = c(6000, 13000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
b0_graphic
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "darkred")+
scale_x_continuous(breaks = c(6000,7000,8000,9000,10000,11000,12000,13000), limits = c(6000, 13000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
b0_graphic
b0_graphic = big_one_df %>%
ggplot(aes(b0))+
geom_histogram(color = "white", fill = "darkred")+
scale_x_continuous(breaks = c(6000,7000,8000,9000,10000,11000,12000,13000), limits = c(6000, 13000))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Intercept (kg/ha)")+
ggthemes::theme_few()
gc()
ggsave("fig/b0_simu.png", dpi = 600, bg = "white", width = 8)
b1_graphic = big_one_df %>%
ggplot(aes(b1))+
geom_histogram(color = "white", fill = "steelblue", bins = 20)+
#scale_x_continuous(breaks = c(-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0), limits = c(-100,0))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
b1_graphic
b1_graphic = big_one_df %>%
ggplot(aes(b1))+
geom_histogram(color = "white", fill = "steelblue", bins = 20)+
scale_x_continuous(breaks = c(-90,-80,-70,-60,-50,-40,-30,-20,-10,0), limits = c(-90,0))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
b1_graphic
b1_graphic = big_one_df %>%
ggplot(aes(b1))+
geom_histogram(color = "white", fill = "steelblue", bins = 20)+
scale_x_continuous(breaks = c(-90,-80,-70,-60,-50,-40,-30), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
b1_graphic
b1_graphic = big_one_df %>%
ggplot(aes(b1))+
geom_histogram(color = "white", fill = "darkgreen", bins = 20)+
scale_x_continuous(breaks = c(-90,-80,-70,-60,-50,-40,-30), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
b1_graphic
b1_graphic = big_one_df %>%
ggplot(aes(b1))+
geom_histogram(color = "white", fill = "darkgreen", bins = 20)+
scale_x_continuous(breaks = c(-90,-80,-70,-60,-50,-40,-30), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
gc()
b1_graphic
ggsave("fig/b1_simu.png", dpi = 600, bg = "white", width = 8)
big_one_df %>%
ggplot(aes(soy_price))+
geom_histogram(color = "white", fill = "darkgreen", bins = 20)+
#scale_x_continuous(breaks = c(-90,-80,-70,-60,-50,-40,-30), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
big_one_df %>%
ggplot(aes(soy_price))+
geom_histogram(color = "white", fill = "black", bins = 20)+
#scale_x_continuous(breaks = c(0.04,0.05,0.06,0.07), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Slope (kg/p.p.)")+
ggthemes::theme_few()
big_one_df %>%
ggplot(aes(soy_price))+
geom_histogram(color = "white", fill = "black", bins = 20)+
#scale_x_continuous(breaks = c(0.04,0.05,0.06,0.07), limits = c(-90,-30))+
theme(text = element_text(face = "bold", size = 14),
axis.title = element_text(size = 16, face = "bold"))+
labs(y = "Frequency",
x = "Corn price (USD/ha)")+
ggthemes::theme_few()
ggsave("fig/corn_price_simu.png", dpi = 600, bg = "white", width = 8)
df2
9691.0 * 0.15
9691.0 * 0.31
9691.0 * 0.15
9691.0 * 0.14
9691.0 * 0.30
9691.0 * 0.48
relative_plot = ggplot() +
geom_line(data = df, aes(x = sev, y = relative, group = rep),
color = "grey", alpha = 0.4) +  # Linhas cinzas para cada simulação
geom_line(data = df2, aes(x = sev, y = mean),
color = "black", size = 1.4) +  # Linha média
geom_line(data = df2, aes(x = sev, y = up_95),
color = "black", linetype = "dashed",size = 1) +  # IC superior
geom_line(data = df2, aes(x = sev, y = low_95),
color = "black", linetype = "dashed",size = 1) +  # IC inferior
scale_y_continuous(breaks = c(20,30, 40,50, 60,
70,80,90,100),
limits = c(20, 100),
expand = c(0, 2))+
scale_x_continuous(breaks = c(0,10,20,30,40,50,60,70,80,90, 100),
limits = c(0, 100),
expand = c(0, 2))+
coord_cartesian(xlim = c(0,100), ylim = c(20,100))+
labs(x = "Disease severity (%)", y = "Relative yield (%) ")+
geom_hline(yintercept = 86,
linetype = 2, color = "darkblue", size = 1)+
geom_vline(xintercept = c(25), linetype = 2, color = "darkblue", size = 1)+
ggthemes::theme_few()+
theme(text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"))
relative_plot
(slope_plot / intercept_plot |relative_plot) +
plot_annotation(tag_levels = "a", tag_prefix = "(", tag_suffix = ")")&
theme(plot.tag = element_text(face = "bold", size = 12))
library(patchwork)
(slope_plot / intercept_plot |relative_plot) +
plot_annotation(tag_levels = "a", tag_prefix = "(", tag_suffix = ")")&
theme(plot.tag = element_text(face = "bold", size = 12))
ggsave("fig/relative_parameters.png", bg = "white", dpi = 600,
height = 4, width = 6)
9691.0 * 0.48
#85.73397	69.94937
df
#85.73397	69.94937
df2
9691.0 * 0.48
df2
weather = gsheet2tbl("https://docs.google.com/spreadsheets/d/1Pceiruz6-WiH9G39mFzm2xiBDSZCNuqvWLvLJ9C73G0/edit?usp=sharing")
weather
library(dplyr)
library(purrr)
library(gsheet)
library(raster)
library(ncdf4)
library(lubridate)
library(readxl)
library(writexl)
library(tidyverse)
library(ggplot2)
# 1. Lendo a planilha de municípios com data de plantio
ma2 <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true")
ma2_df <- as.data.frame(ma2)
ma2_df$planting_date <- as.Date(ma2_df$planting_date, format = "%Y-%m-%d")
# 2. Adicionando colunas para 90 dias antes e depois da data de plantio
ma3 <- ma2_df %>%
mutate(
pd_minus90 = planting_date - 90,  # 90 dias antes do plantio
pd90 = planting_date + 90         # 90 dias após o plantio
)
# 3. Caminho para o arquivo NetCDF
netcdf_path <- "C:/Users/ricar/Documents/Extract_Xavier/code/data/pr_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc"
# 4. Função para verificar e interpretar as datas no NetCDF considerando "hours since"
get_nc_dates <- function(netcdf_path) {
nc_data <- nc_open(netcdf_path)
# Lendo a variável de tempo e sua unidade
time_var <- ncvar_get(nc_data, "time")
time_units <- ncatt_get(nc_data, "time", "units")$value
print(paste("Unidade de tempo no NetCDF:", time_units))
# Extraindo a origem da unidade de tempo e verificando o formato
if (grepl("hours since", time_units)) {
origin_date <- as.POSIXct(sub("hours since ", "", time_units), tz = "UTC")
nc_dates <- origin_date + as.difftime(time_var, units = "hours")
} else {
stop("Unidade de tempo inesperada:", time_units)
}
# Fechando o arquivo NetCDF
nc_close(nc_data)
return(as.Date(nc_dates))
}
# 5. Chamando a função para obter as datas
nc_dates <- get_nc_dates(netcdf_path)
# 6. Função para extrair dados do NetCDF para uma linha
get_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {
# Abrindo o arquivo NetCDF
nc_data <- nc_open(netcdf_path)
# Extraindo variáveis de interesse
lon <- row$lon
lat <- row$lat
start_date <- row$pd_minus90  # Início: 90 dias antes do plantio
end_date <- row$pd90          # Fim: 90 dias após o plantio
# Gerando sequência de datas e comparando com o NetCDF
date_seq <- seq.Date(start_date, end_date, by = "day")
date_indices <- match(date_seq, nc_dates)
# Removendo índices de datas inexistentes
date_indices <- date_indices[!is.na(date_indices)]
# Caso não haja datas válidas, retornar NULL
if (length(date_indices) == 0) {
message("Nenhuma data correspondente encontrada para linha ", line_number, " (", row$location, ")")
nc_close(nc_data)
return(NULL)
}
# Extraindo dados de precipitação para as coordenadas e datas específicas
lon_idx <- which.min(abs(ncvar_get(nc_data, "longitude") - lon))
lat_idx <- which.min(abs(ncvar_get(nc_data, "latitude") - lat))
precip_data <- sapply(date_indices, function(i) {
ncvar_get(nc_data, "pr", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))
})
# Fechando o arquivo NetCDF
nc_close(nc_data)
# Se a extração de precip_data não retornar dados, retornar NULL
if (length(precip_data) == 0 || all(is.na(precip_data))) {
message("Nenhum dado de precipitação encontrado para linha ", line_number, " (", row$location, ")")
return(NULL)
}
# Criando um dataframe com os resultados e informações adicionais
result <- data.frame(
date = date_seq[!is.na(date_indices)],
precipitation = precip_data,
study = row$study,
location = row$location,
state = row$state,
year = format(row$planting_date, "%Y"),
planting_date = row$planting_date,
mean_sev = row$mean_sev,
lat = row$lat,
lon = row$lon,
level = row$level
)
return(result)
}
# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF
box <- ma3 %>%
split(1:nrow(.)) %>%
map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = "id")
# 8. Visualizando o resultado final
print(box)
# 9. Salvando o resultado em um arquivo Excel
#write_xlsx(box, "data/br_dwgd_prec.xlsx")
weather = gsheet2tbl("https://docs.google.com/spreadsheets/d/1Pceiruz6-WiH9G39mFzm2xiBDSZCNuqvWLvLJ9C73G0/edit?usp=sharing")
weather
weather = gsheet2tbl("https://docs.google.com/spreadsheets/d/1Pceiruz6-WiH9G39mFzm2xiBDSZCNuqvWLvLJ9C73G0/edit?usp=sharing")
weather
weather$trial = as.factor(weather$trial)
weather
library(janitor)
library(nasapower)
library(dplyr) # Para mutate
# Criar um dataframe vazio para armazenar os dados climáticos
box <- data.frame()
# Loop para extrair dados climáticos para cada estudo
for(i in 1:nrow(weather)) {
# Certificar que as datas estão no formato correto
sowing_date <- as.Date(weather$sowing[i])
harvest_date <- as.Date(weather$harvest[i])
# Obter os dados climáticos usando nasapower
lil_nasa <- get_power(
community = "ag",
temporal_api = "daily",
dates = c(sowing_date, harvest_date), # Usa as datas diretamente do dataframe
lonlat = c(weather$lon[i], weather$lat[i]), # Longitude e Latitude
pars = c("T2M", "RH2M", "PRECTOTCORR", "T2M_MAX", "T2M_MIN", "T2MDEW") # Parâmetros desejados
) %>%
mutate(study = weather$trial[i]) # Adiciona a identificação do estudo
# Combina os dados atuais com os anteriores
box <- bind_rows(box, lil_nasa)
}
box
box
box %>%
group_by(study) %>%
summarise(
T2M = mean(T2M),
RH2M = mean(RH2M),
RAIN = sum(PRECTOTCORR)
)
box %>%
summarise(
T2M = mean(T2M),
RH2M = mean(RH2M),
RAIN = sum(PRECTOTCORR)
)
box %>%
summarise(
T2M = mean(T2M),
RH2M = mean(RH2M),
RAIN = mean(PRECTOTCORR)
)
box %>%
summarise(
T2M = mean(T2M),
RH2M = mean(RH2M),
RAIN = sum(PRECTOTCORR)
)
box %>%
summarise(
T2M = mean(T2M),
RH2M = mean(RH2M),
RAIN = sum(PRECTOTCORR)/3
)
write_xlsx(box,"data/weather_data.xlsx")
write_xlsx(box,"data/weather_data.xlsx")
power_df2
library(tidyverse)
library(ggplot2)
library(dplyr)
library(gsheet)
library(lme4)
library(cowplot)
library(readxl)
library(writexl)
library(ggdist)
simdata
library(simdata)
simdata
install.packages("simdata")
library(simdata)
simdata
library(simdata)
library(simr)
simdata
install.packages(c("bit", "bit64", "caret", "classInt", "cli", "colorspace", "curl", "data.table", "e1071", "glue", "gower", "gsheet", "jsonlite", "lme4", "lubridate", "maps", "mvtnorm", "parallelly", "purrr", "Rcpp", "rlang", "rpart", "sf", "terra", "TMB", "xfun", "zoo"))
