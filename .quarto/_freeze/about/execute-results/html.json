{
  "hash": "6d5b5b19419c11a2cb5503a79848c8f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\"\nmessage: false\nwarning: false\n---\n\n\n\n# Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gsheet)\nlibrary(lme4)\nlibrary(cowplot)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(ggdist)\n```\n:::\n\n\n\n# Importation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngls = gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1TC_-I7OpUloaqh5sd3mVu8YW-V1Lxk8SZ_DRCIUmWOE/edit?usp=sharing\")\n```\n:::\n\n\n\n# Descriptive analysis\n\n## Severity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_sev = gls %>% \n  ggplot(aes(sev))+\n  geom_histogram(color = \"white\", fill = \"black\")+\n  #stat_function(fun=function(x) dbeta(x, 0.94145, 6.45601), color= \"darkred\", size = 1.2)+\n  ggthemes::theme_few()+\n  labs(x = \"Disease severity (%)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"))\n```\n:::\n\n\n\n\n## Yield\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyy = gls %>% \n  filter(!yld <= 1500)\n\nmean(gls$yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8965.05\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(gls$yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13073.42\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(yy$yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3382.11\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(yy$yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0%       25%       50%       75%      100% \n 3382.110  8018.915  8971.835  9844.248 13073.420 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_intercept = mean(gls$yld)\nsd_intercept = sd(gls$yld)\n\nplot_yld = gls %>% \n  filter(!yld <=1000) %>% \n  ggplot(aes(yld))+\ngeom_histogram(fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  scale_x_continuous(breaks = c(4000, 6000,8000,10000,12000, 14000), limits = c(4000, 14000))+\n  ggthemes::theme_few()+\n  labs(x = \"Yield (kg/ha)\",\n       y = \"\")+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"))\n\nplot_yld\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(plot_sev, plot_yld, ncol = 2, label_x = -0.03, label_size = 14,\n          labels = c(\"(a)\",\"(b)\"))\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/sev_yld.png\", bg = \"white\", dpi = 600, \n       width = 8, height = 4)\n```\n:::\n\n\n\n## Prepare data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestria2 <- gls |> \n  group_by(trial, hybrid) |> \n  summarise(mean_sev = mean(sev),\n            mean_yld = mean(yld))\n\n\nmax(estria2$mean_sev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.66667\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(estria2$mean_sev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.333333\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(estria2$mean_sev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.83716\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(estria2$mean_sev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.5\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(estria2$mean_sev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.12138\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12503.86\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3909.777\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8964.191\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8989.737\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1359.003\n```\n\n\n:::\n:::\n\n\n\n## Visualize\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestria2 = estria2 %>% \n  mutate(\n    period = case_when(trial == \"2018_1\"~ \"2018/1\",\n                       trial == \"2018_2\" ~\"2018/2\",\n                       trial == \"2018_19\"~\"2018/2019\",\n                       trial == \"2019_1\" ~\"2019/1\"))\nlibrary(ggthemes)\n\n trials = estria2 |>\n  ggplot(aes(mean_sev, mean_yld, group = as.factor(period),color = as.factor(period)))+ #\n  geom_point()+\n  #facet_wrap(~period)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2)+\n  scale_color_viridis_d()+\n  theme_minimal()+\n   scale_y_continuous(breaks = c(4000, 5000,6000,7000,8000,9000,10000,11000,12000), \n                     limits = c(4000, 12000))+\n  theme_few()+\n  labs(x = \"Disease severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Seasons\")+\n  theme(text = element_text(size = 12, face = \"bold\"),\n        legend.position = \"none\")\n  #geom_abline(slope = -49.3, intercept = 9714, linetype = 1, linewidth =2, color = \"gray50\")\n\nggsave(\"fig/trials.png\", bg = \"white\", dpi = 600, \n       width = 6, height = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\nlmer_stats = estria2 %>%\n  #group_by(year) %>%\n  dplyr::select(trial, mean_yld,mean_sev) %>%\n  group_by(trial) %>%\n  do({\n    model <- lm(.$mean_yld ~ .$mean_sev)\n    tidy_model <- tidy(model)\n    confint_model <- confint(model)  # Calcula os intervalos de confiança\n    bind_cols(tidy_model, confint_model)\n  })\n\n\n\n\nlmer_stats = lmer_stats |> \nfilter(term %in% c(\"(Intercept)\",\".$mean_sev\"))\n \nlmer_stats[lmer_stats$term== \"(Intercept)\",c(\"parameters\")] <- \"Intercept\"\nlmer_stats[lmer_stats$term== \".$mean_sev\",c(\"parameters\")] <- \"Slope\"\n\ni <- 1\n while (i <= nrow(lmer_stats)) {\n  if (lmer_stats$parameters[i] == \"Slope\" && lmer_stats$estimate[i] > 0) {\n    # Remove a linha do Slope e a linha do Intercept correspondente\n    lmer_stats <- lmer_stats[-c(i, i - 1), ]\n    # Atualiza o índice, pois duas linhas foram removidas\n    i <- i - 2\n  }\n  i <- i + 1\n }\nlmer_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 9\n# Groups:   trial [4]\n  trial  term  estimate std.error statistic  p.value `2.5 %` `97.5 %` parameters\n  <chr>  <chr>    <dbl>     <dbl>     <dbl>    <dbl>   <dbl>    <dbl> <chr>     \n1 2018_1 (Int…   8458.     172.       49.1  1.11e-42  8111.   8804.   Intercept \n2 2018_1 .$me…    -42.8      8.57     -4.99 8.20e- 6   -60.0   -25.6  Slope     \n3 2018_… (Int…  11240.     335.       33.5  4.58e-27 10558.  11922.   Intercept \n4 2018_… .$me…    -77.4     14.5      -5.33 7.01e- 6  -107.    -47.9  Slope     \n5 2018_2 (Int…   9468.     145.       65.5  6.05e-34  9173.   9764.   Intercept \n6 2018_2 .$me…    -34.0     10.0      -3.39 1.96e- 3   -54.5   -13.5  Slope     \n7 2019_1 (Int…   9680.     224.       43.3  3.45e-44  9233.  10128.   Intercept \n8 2019_1 .$me…    -31.0     12.7      -2.44 1.80e- 2   -56.5    -5.53 Slope     \n```\n\n\n:::\n\n```{.r .cell-code}\nslope_trial_m= lmer_stats |> \n  filter(parameters == \"Slope\") %>% \n  summarise(\n    Slope = estimate\n  )\n\nslope_trial_m[,1] = NULL\n\nslope_trial_m |> \n  filter(!Slope == \"NA\") |> \n  summarise(\nmean = mean(Slope))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1 -46.3\n```\n\n\n:::\n\n```{.r .cell-code}\nintercept_trial_m = lmer_stats |> \n  filter(parameters == \"Intercept\") %>%  \n  summarise(\n    Intercept = estimate\n  )\nintercept_trial_m[,1] = NULL\n\nmean(intercept_trial_m$Intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9711.667\n```\n\n\n:::\n\n```{.r .cell-code}\nregression_trial_m = cbind(slope_trial_m,intercept_trial_m)\nregression_trial_m[,3] = NULL\n\nsummary_stats <- regression_trial_m %>%\n  reframe(\n    mean_intercept = mean(Intercept),\n    mean_slope = mean(Slope),\n    ci_intercept_lower = quantile(Intercept, 0.025),\n    ci_intercept_upper = quantile(Intercept, 0.975),\n    ci_slope_lower = quantile(Slope, 0.025),\n    ci_slope_upper = quantile(Slope, 0.975)\n  )\n\ntrials = estria2|> \n ggplot(aes(mean_sev, y = mean_yld)) +\n  geom_point(color = \"NA\")+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  geom_abline(data =regression_trial_m, aes(slope = Slope, intercept = Intercept), size = 1,\n              alpha = 0.5, color = \"grey\")+##9ccb86\n  #geom_abline(data =summary_stats, aes(slope = mean_slope, intercept = mean_intercept),\n   #           size = 1.5, fill = \"black\", color = \"black\")+\ngeom_abline(data = summary_stats,aes(intercept = ci_intercept_lower,slope = ci_slope_lower) ,\n              size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(data = summary_stats, aes(intercept = ci_intercept_upper,slope = ci_slope_upper), size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(aes(slope = -49.37, intercept = 9714.0),\n              size = 1.5, fill = \"black\", color = \"black\")+\ngeom_abline(aes(intercept = 8699.1,slope = -60.59) ,\n              size = .51, linetype = 2)+\n  geom_abline(aes(intercept = 10733.8,slope = -38.00), size = .51, linetype = 2)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"),\n        legend.position = \"none\")+\n  labs(x = \"Disease severity (%)\", y = \"Attainable yield (kg/ha)\",\n       title = \"\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_plot = estria2 |> \n  filter(trial == \"2018_1\") %>% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nsecond_plot = estria2 |> \n  filter(trial == \"2018_2\") %>% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nthird_plot = estria2 |> \n  filter(trial == \"2018_19\") %>% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nfourth_plot = estria2 |> \n  filter(trial == \"2019_1\") %>% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlibrary(patchwork)\n\ncombined_plot <- (first_plot | plot_yld | second_plot) / \n                 (third_plot | plot_sev | fourth_plot) +\n                 plot_layout(widths = c(2, 10, 2), heights = c(1, 1))\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/plot_all.png\", bg = \"white\", width = 10, height = 8)\n```\n:::\n\n\n\n# Modeling\n\n\n### Fitting\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n\n# Fit a mixed-effects model\nobs_model_lmer <- lmer(mean_yld ~ mean_sev + (1 | trial), data = estria2)\n\n\n# Summary of the model\nsummary(obs_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: mean_yld ~ mean_sev + (1 | trial)\n   Data: estria2\n\nREML criterion at convergence: 2880.3\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4362 -0.7056  0.0671  0.7105  2.0247 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n trial    (Intercept) 820678   905.9   \n Residual             941736   970.4   \nNumber of obs: 174, groups:  trial, 4\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept) 9714.049    465.870  20.851\nmean_sev     -49.378      5.745  -8.595\n\nCorrelation of Fixed Effects:\n         (Intr)\nmean_sev -0.168\n```\n\n\n:::\n\n```{.r .cell-code}\nconfint(obs_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 2.5 %      97.5 %\n.sig01       426.84166  1944.19893\n.sigma       873.17446  1080.29427\n(Intercept) 8699.18638 10733.83869\nmean_sev     -60.59337   -38.00271\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Parameters from the fitted model\nfixed_intercept <- 9714.049\nfixed_slope <- -49.378\nrandom_effect_sd <- 905.9  # sqrt(820678)\nresidual_sd <- 970.4       # sqrt(941736)\n\n# Number of experiments and points per experiment\nnum_experiments <- 200  # New experiments\npoints_per_experiment <- 50\n\n# Simulate data\n# Get the range of observed severity values from the original dataset\nset.seed(123)\n\n# Simulate data with variable max severity for each experiment\nsimulated_data_lmer <- data.frame()\nfor (exp in 1:num_experiments) {\n  # Simulate random intercept for the experiment\n  u_j <- rnorm(1, mean = 0, sd = random_effect_sd)\n  \n  # Randomly select a max severity for this simulation between 50% and 80%\n  max_sev_sim <- runif(1, min = 20, max = 80)\n  \n  # Simulate severity values (independent variable) within the 0 to max_sev_sim range\n  sev <- runif(points_per_experiment, min = 0, max = max_sev_sim)\n\n  # Simulate residuals\n  residuals <- rnorm(points_per_experiment, mean = 0, sd = residual_sd)\n  \n  # Generate yield (dependent variable)\n  yld <- fixed_intercept + u_j + fixed_slope * sev + residuals\n  \n  # Combine into a data frame\n  exp_data <- data.frame(experiment = paste0(\"Exp_\", exp), sev = sev, yld = yld)\n  simulated_data_lmer <- rbind(simulated_data_lmer, exp_data)\n}\n\nsimulated_data_lmer$hybrid <- paste0(\"hybrid_\", sprintf(\"%02d\", (seq_len(nrow(simulated_data_lmer)) - 1) %/% 50 + 1))\n# View simulated data\nhead(simulated_data_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  experiment       sev      yld    hybrid\n1      Exp_1 39.328372 6133.313 hybrid_01\n2      Exp_1 41.887111 6343.725 hybrid_01\n3      Exp_1  2.029023 9770.787 hybrid_01\n4      Exp_1 23.521087 7734.307 hybrid_01\n5      Exp_1 39.747109 5970.980 hybrid_01\n6      Exp_1 24.560152 7411.723 hybrid_01\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(simulated_data_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  experiment             sev                yld           hybrid         \n Length:10000       Min.   : 0.00051   Min.   : 2528   Length:10000      \n Class :character   1st Qu.:10.61846   1st Qu.: 7391   Class :character  \n Mode  :character   Median :21.04083   Median : 8509   Mode  :character  \n                    Mean   :24.67849   Mean   : 8472                     \n                    3rd Qu.:36.17231   3rd Qu.: 9594                     \n                    Max.   :78.27768   Max.   :14239                     \n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Compare simulated and real severity-yield relationships\nggplot(simulated_data_lmer, aes(x = sev, y = yld, color = experiment)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n  labs(title = \"Simulated Severity-Yield Data\", x = \"Severity\", y = \"Yield\")\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsimu_model_lmer <- lmer(yld ~ sev + (1 | experiment), data = simulated_data_lmer)\nsimu_model_lmer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: yld ~ sev + (1 | experiment)\n   Data: simulated_data_lmer\nREML criterion at convergence: 166620.8\nRandom effects:\n Groups     Name        Std.Dev.\n experiment (Intercept) 937.3   \n Residual               966.9   \nNumber of obs: 10000, groups:  experiment, 200\nFixed Effects:\n(Intercept)          sev  \n    9691.01       -49.39  \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(simu_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: yld ~ sev + (1 | experiment)\n   Data: simulated_data_lmer\n\nREML criterion at convergence: 166620.8\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.6504 -0.6689  0.0041  0.6771  3.3524 \n\nRandom effects:\n Groups     Name        Variance Std.Dev.\n experiment (Intercept) 878546   937.3   \n Residual               934819   966.9   \nNumber of obs: 10000, groups:  experiment, 200\n\nFixed effects:\n             Estimate Std. Error t value\n(Intercept) 9691.0145    68.8438  140.77\nsev          -49.3879     0.6449  -76.59\n\nCorrelation of Fixed Effects:\n    (Intr)\nsev -0.231\n```\n\n\n:::\n\n```{.r .cell-code}\nconfint(simu_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                2.5 %    97.5 %\n.sig01       848.3483 1036.5979\n.sigma       953.4327  980.5062\n(Intercept) 9555.8113 9826.1935\nsev          -50.6520  -48.1241\n```\n\n\n:::\n\n```{.r .cell-code}\nobs_fixed_effects_lmer <- fixef(obs_model_lmer)  # From the original model\nsimu_fixed_effects_lmer <- fixef(simu_model_lmer)  # From the simulated model\n\nprint(obs_fixed_effects_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)    mean_sev \n 9714.04857   -49.37773 \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(simu_fixed_effects_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         sev \n 9691.01451   -49.38785 \n```\n\n\n:::\n\n```{.r .cell-code}\nobs_random_effects_lmer <- VarCorr(obs_model_lmer)\nsimu_random_effects_lmer <- VarCorr(simu_model_lmer)\n\nprint(obs_random_effects_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Groups   Name        Std.Dev.\n trial    (Intercept) 905.91  \n Residual             970.43  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(simu_random_effects_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Groups     Name        Std.Dev.\n experiment (Intercept) 937.31  \n Residual               966.86  \n```\n\n\n:::\n\n```{.r .cell-code}\nobs_residual_sd_lmer <- attr(VarCorr(obs_model_lmer), \"sc\")\nsimu_residual_sd_lmer <- attr(VarCorr(simu_model_lmer), \"sc\")\n\nprint(obs_residual_sd_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 970.4308\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(simu_residual_sd_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 966.8604\n```\n\n\n:::\n:::\n\n\n## Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\nlmer_stats = simulated_data_lmer %>%\n  #group_by(year) %>%\n  dplyr::select(experiment, yld,sev) %>%\n  group_by(experiment) %>%\n  do({\n    model <- lm(.$yld ~ .$sev)\n    tidy_model <- tidy(model)\n    confint_model <- confint(model)  # Calcula os intervalos de confiança\n    bind_cols(tidy_model, confint_model)\n  })\n\n\n\n\nlmer_stats = lmer_stats |> \nfilter(term %in% c(\"(Intercept)\",\".$sev\"))\n \nlmer_stats[lmer_stats$term== \"(Intercept)\",c(\"parameters\")] <- \"Intercept\"\nlmer_stats[lmer_stats$term== \".$sev\",c(\"parameters\")] <- \"Slope\"\n\ni <- 1\n while (i <= nrow(lmer_stats)) {\n  if (lmer_stats$parameters[i] == \"Slope\" && lmer_stats$estimate[i] > 0) {\n    # Remove a linha do Slope e a linha do Intercept correspondente\n    lmer_stats <- lmer_stats[-c(i, i - 1), ]\n    # Atualiza o índice, pois duas linhas foram removidas\n    i <- i - 2\n  }\n  i <- i + 1\n }\nlmer_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 400 × 9\n# Groups:   experiment [200]\n   experiment term        estimate std.error statistic  p.value `2.5 %` `97.5 %`\n   <chr>      <chr>          <dbl>     <dbl>     <dbl>    <dbl>   <dbl>    <dbl>\n 1 Exp_1      (Intercept)   9255.     282.       32.8  1.54e-34  8688.    9822. \n 2 Exp_1      .$sev          -54.9     10.6      -5.16 4.61e- 6   -76.3    -33.5\n 3 Exp_10     (Intercept)  11383.     298.       38.2  1.31e-37 10784.   11981. \n 4 Exp_10     .$sev          -46.2      8.91     -5.18 4.35e- 6   -64.1    -28.3\n 5 Exp_100    (Intercept)  10388.     227.       45.7  3.21e-41  9931.   10846. \n 6 Exp_100    .$sev          -43.9     10.1      -4.37 6.72e- 5   -64.2    -23.7\n 7 Exp_101    (Intercept)   9420.     235.       40.1  1.46e-38  8948.    9893. \n 8 Exp_101    .$sev          -52.8      6.61     -7.99 2.30e-10   -66.1    -39.5\n 9 Exp_102    (Intercept)   9851.     208.       47.3  6.15e-42  9432.   10269. \n10 Exp_102    .$sev          -63.6      7.25     -8.77 1.54e-11   -78.2    -49.0\n# ℹ 390 more rows\n# ℹ 1 more variable: parameters <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nslope_trial_m= lmer_stats |> \n  filter(parameters == \"Slope\") %>% \n  summarise(\n    Slope = estimate\n  )\n\nslope_trial_m[,1] = NULL\n\nslope_trial_m |> \n  filter(!Slope == \"NA\") |> \n  summarise(\nmean = mean(Slope))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1 -49.6\n```\n\n\n:::\n\n```{.r .cell-code}\nintercept_trial_m = lmer_stats |> \n  filter(parameters == \"Intercept\") %>%  \n  summarise(\n    Intercept = estimate\n  )\nintercept_trial_m[,1] = NULL\n\nmean(intercept_trial_m$Intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9692.539\n```\n\n\n:::\n\n```{.r .cell-code}\nregression_trial_m = cbind(slope_trial_m,intercept_trial_m)\nregression_trial_m[,3] = NULL\n\nsummary_stats <- regression_trial_m %>%\n  reframe(\n    mean_intercept = mean(Intercept),\n    mean_slope = mean(Slope),\n    ci_intercept_lower = quantile(Intercept, 0.025),\n    ci_intercept_upper = quantile(Intercept, 0.975),\n    ci_slope_lower = quantile(Slope, 0.025),\n    ci_slope_upper = quantile(Slope, 0.975)\n  )\n\nlmer_plot = simulated_data_lmer|> \n ggplot(aes(sev, y = yld)) +\n  geom_point(color = \"NA\")+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  geom_abline(data =regression_trial_m, aes(slope = Slope, intercept = Intercept), size = 1,\n              alpha = 0.5, color = \"grey\")+##9ccb86\n#  geom_abline(data =summary_stats, aes(slope = mean_slope, intercept = mean_intercept),\n #             size = 1.5, fill = \"black\", color = \"black\")+\n  geom_abline(data = summary_stats,aes(intercept = ci_intercept_lower,slope = ci_slope_lower) ,\n              size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(data = summary_stats, aes(intercept = ci_intercept_upper,slope = ci_slope_upper), size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline( aes(slope = -49.38, intercept = 9691.0),\n              size = 1.5, fill = \"black\", color = \"black\")+\n  geom_abline(aes(intercept = 9555.81,slope = -50.65) ,\n              size = .51, linetype = 2)+\n  geom_abline(aes(intercept = 9826.19,slope = -48.12), size = .51, linetype = 2)+\n   ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"),\n        legend.position = \"none\")+\n  labs(x = \"Disease severity (%)\", y = \"\",\n       title = \"\")\n\nlmer_plot\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n## Joining\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(trials,lmer_plot,plot_sev, plot_yld, labels = c(\"(a)\",\"(b)\",\"(c)\",\"(d)\"), ncol = 2,\n          label_size = 10, label_x = -0.01)\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/obs_simu_model.png\", bg = \"white\", dpi = 600,width = 6, height = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(estria2$mean_sev, estria2$mean_yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.4051456\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(simulated_data_lmer$sev, simulated_data_lmer$yld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.5508678\n```\n\n\n:::\n:::\n\n\n\n# Performance\n\n### Empirical\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobs_lmer_predicted <- predict(obs_model_lmer)\n\n\nobs_lmer_observed <- estria2$mean_yld\n\n\nobs_lmer_residuals <- obs_lmer_observed - obs_lmer_predicted\n\n\nobs_lmer_RMSE <- sqrt(mean(obs_lmer_residuals^2))  \nobs_lmer_MAE <- mean(abs(obs_lmer_residuals))     \nobs_lmer_correlation <- cor(obs_lmer_observed, obs_lmer_predicted)\n\nperformance::check_normality(obs_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOK: residuals appear as normally distributed (p = 0.227).\n```\n\n\n:::\n\n```{.r .cell-code}\nperformance::check_heteroscedasticity(obs_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWarning: Heteroscedasticity (non-constant error variance) detected (p < .001).\n```\n\n\n:::\n\n```{.r .cell-code}\nperformance::check_autocorrelation(obs_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWarning: Autocorrelated residuals detected (p = 0.004).\n```\n\n\n:::\n:::\n\n\n### Simulated\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimu_lmer_predicted <- predict(simu_model_lmer)\n\n\nsimu_lmer_observed <- simulated_data_lmer$yld\n\n\nsimu_lmer_residuals <- simu_lmer_observed - simu_lmer_predicted\n\n\nsimu_lmer_RMSE <- sqrt(mean(simu_lmer_residuals^2))  \nsimu_lmer_MAE <- mean(abs(simu_lmer_residuals))     \nsimu_lmer_correlation <- cor(simu_lmer_observed, simu_lmer_predicted)       \n\nperformance::check_normality(simu_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOK: residuals appear as normally distributed (p = 0.875).\n```\n\n\n:::\n\n```{.r .cell-code}\nperformance::check_heteroscedasticity(simu_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWarning: Heteroscedasticity (non-constant error variance) detected (p < .001).\n```\n\n\n:::\n\n```{.r .cell-code}\nperformance::check_autocorrelation(simu_model_lmer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWarning: Autocorrelated residuals detected (p < .001).\n```\n\n\n:::\n:::\n\n\n\n\n## Visualization\n\n#### Simulated\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair os resíduos e quantis teóricos\nlmer_residuals <- residuals(simu_model_lmer, type = \"deviance\")\nlmer_qq_data <- data.frame(\n  theoretical = qqnorm(lmer_residuals, plot.it = FALSE)$x*1000,\n  residuals = qqnorm(lmer_residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nlmer_qq = lmer_qq_data %>% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Theoretical Quantiles\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlmer_qq\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair preditores lineares e resíduos\nlmer_linear_predictors <- predict(simu_model_lmer, type = \"link\")\nlmer_residuals_data <- data.frame(\n  linear_predictors = lmer_linear_predictors,\n  residuals = lmer_residuals\n)\n\n# Plotar resíduos vs preditores lineares\nlmer_predictors = lmer_residuals_data %>% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Linear Predictors\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular média e desvio-padrão dos resíduos\nmean_res <- mean(lmer_residuals_data$residuals)\nsd_res <- sd(lmer_residuals_data$residuals)\n\n# Plotar o histograma e a curva acumulada normal\nlmer_res_hist <- ggplot(lmer_residuals_data, aes(x = residuals)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_res, sd = sd_res), \n                color = \"darkred\", size = 1.2, linetype = \"solid\") + # Adiciona a curva normal\n  scale_x_continuous(breaks = c(-2500, -1250, 0, 1250, 2500), \n                     limits = c(-2500, 2500)) +\n  labs(x = \"Deviance Residuals\", y = \"\") +\n  ggthemes::theme_few() +\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n# Exibir o gráfico\nlmer_res_hist\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair valores observados e preditos\nlmer_observed <- simulated_data_lmer$yld\nlmer_predicted <- predict(simu_model_lmer, type = \"response\")\nlmer_prediction_data <- data.frame(\n  observed = lmer_observed,\n  predicted = lmer_predicted\n)\n\n# Plotar valores preditos vs observados\nlmer_pd_ob = lmer_prediction_data %>% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  labs(x = \"Observed\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlmer_pd_ob\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmax(lmer_prediction_data$predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12122.53\n```\n\n\n:::\n:::\n\n\n#### Observed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair os resíduos e quantis teóricos\nobs_lmer_residuals <- residuals(obs_model_lmer, type = \"deviance\")\nobs_lmer_qq_data <- data.frame(\n  theoretical = qqnorm(obs_lmer_residuals, plot.it = FALSE)$x*1000,\n  residuals = qqnorm(obs_lmer_residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nobs_lmer_qq = obs_lmer_qq_data %>% \n  filter(!residuals < -2000) %>% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n   scale_x_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Theoretical Quantiles\", y = \"Dev. Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nobs_lmer_qq\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair preditores lineares e resíduos\nobs_lmer_linear_predictors <- predict(obs_model_lmer, type = \"link\")\nobs_lmer_residuals_data <- data.frame(\n  linear_predictors = obs_lmer_linear_predictors,\n  residuals = obs_lmer_residuals\n)\n\n# Plotar resíduos vs preditores lineares\nobs_lmer_predictors = obs_lmer_residuals_data %>%\n  filter(!residuals < -2000) %>% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Linear Predictors\", y = \"Dev. Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular média e desvio-padrão dos resíduos\nmean_res <- mean(obs_lmer_residuals_data$residuals)\nsd_res <- sd(obs_lmer_residuals_data$residuals)\n\n# Plotar o histograma e a curva acumulada normal\nobs_lmer_res_hist <- ggplot(obs_lmer_residuals_data, aes(x = residuals)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_res, sd = sd_res), \n                color = \"darkred\", size = 1.2, linetype = \"solid\") + # Adiciona a curva normal\n  scale_x_continuous(breaks = c(-2500, -1250, 0, 1250, 2500), \n                     limits = c(-2500, 2500)) +\n  labs(x = \"Deviance Residuals\", y = \"Frequency\") +\n  ggthemes::theme_few() +\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n# Exibir o gráfico\nobs_lmer_res_hist\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extrair valores observados e preditos\nobs_lmer_observed <- estria2$mean_yld\nobs_lmer_predicted <- predict(obs_model_lmer, type = \"response\")\nobs_lmer_prediction_data <- data.frame(\n  observed = obs_lmer_observed,\n  predicted = obs_lmer_predicted\n)\n\n# Plotar valores preditos vs observados\nobs_lmer_pd_ob = obs_lmer_prediction_data %>% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  labs(x = \"Observed\", y = \"Predicted\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nobs_lmer_pd_ob\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n#### Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot_grid(obs_lmer_pd_ob,lmer_pd_ob,\n #         obs_lmer_qq,lmer_qq,\n  #        obs_lmer_predictors,lmer_predictors,\n   #       obs_lmer_res_hist,lmer_res_hist, ncol = 2, labels = c(\"a\"),\n    #      label_x = -0.01,label_y = 0.01)\n\n(obs_lmer_pd_ob | lmer_pd_ob) / \n(obs_lmer_qq | lmer_qq) / \n(obs_lmer_predictors | lmer_predictors) / \n(obs_lmer_res_hist | lmer_res_hist) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\") &\n  theme(plot.tag = element_text(face = \"bold\", size = 14))\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/lmm_residue.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n:::\n\n\n\n# Power analysis of model by simulation\n### Severity\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(simr)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Ajuste do modelo original\nsev_lmer <- lmer(mean_yld ~ mean_sev + (1 | trial), data = estria2)\n\n# Criar um modelo extendido para simulação\next_sev_lmer <- extend(sev_lmer, along = \"mean_sev\", n = 10000)\n\n# Rodar várias simulações do powerCurve e armazenar os resultados\nnum_simulations <- 50  # Número de simulações individuais\npower_results <- list()\n\nfor (i in 1:num_simulations) {\n  power_results[[i]] <- as.data.frame(summary(powerCurve(ext_sev_lmer, \n                                                          along = \"mean_sev\", \n                                                          nsim = 100, \n                                                          breaks = 1:100)))\n}\n\n\npower_df <- bind_rows(power_results, .id = \"simulation\")\n\n#write_xlsx(power_df, \"data/power_df.xlsx\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npower_df = read_xlsx(\"data/power_df.xlsx\")\n\n\npower_df2 <- power_df %>%\n  group_by(nlevels) %>%\n  summarise(mean = mean(mean, na.rm = TRUE),\n            lower = mean(lower, na.rm = TRUE),\n            upper = mean(upper, na.rm = TRUE))\n\npower_df %>% \n  filter(mean >= 0.80 & mean <=0.85)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 8\n   simulation  nrow nlevels successes trials  mean lower upper\n   <chr>      <dbl>   <dbl>     <dbl>  <dbl> <dbl> <dbl> <dbl>\n 1 1             84      26        83    100  0.83 0.742 0.898\n 2 2             81      25        83    100  0.83 0.742 0.898\n 3 3             77      24        83    100  0.83 0.742 0.898\n 4 4             81      25        83    100  0.83 0.742 0.898\n 5 5             81      25        85    100  0.85 0.765 0.914\n 6 7             81      25        82    100  0.82 0.731 0.890\n 7 8             81      25        82    100  0.82 0.731 0.890\n 8 8             84      26        85    100  0.85 0.765 0.914\n 9 10            77      24        84    100  0.84 0.753 0.906\n10 10            81      25        85    100  0.85 0.765 0.914\n# ℹ 48 more rows\n```\n\n\n:::\n:::\n\n\n\n#### Plotting\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # Linhas cinzas para cada simulação individual\n  geom_line(data = power_df, aes(x = nlevels, y = mean * 100, group = simulation), \n            color = \"gray\", alpha = 0.4) +\n  # Linha da média (laranja)\n  geom_line(data = power_df2, aes(x = nlevels, y = mean * 100), \n            color = \"black\", size = 1.2) +\n  # Linhas superior e inferior (preto, tracejado)\n  geom_line(data = power_df2, aes(x = nlevels, y = upper * 100), \n            color = \"black\", linetype = \"dashed\", size = 0.8) +\n  geom_line(data = power_df2, aes(x = nlevels, y = lower * 100), \n            color = \"black\", linetype = \"dashed\", size = 0.8)+\n  scale_x_continuous(breaks = c(0,5,10,15,20,25,30,35,40,45,50), limits = c(0, 50))+\n  scale_y_continuous(breaks = c(0,10,20,30,40,50,\n                                60,70,80,90,100), limits = c(0, 100))+\n  geom_hline(yintercept = 80, linetype = \"dashed\", size = 1, color = \"darkblue\")+\n  geom_vline(xintercept = c(25), linetype = 2, size = 1, color = \"darkblue\")+\n  coord_cartesian(xlim = c(0,50))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"),\n        legend.position = \"none\")+\n  labs(x = \"Disease severity (%)\",\n       y = \"Power (%)\")\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/power_model.png\", bg = \"white\", dpi = 600,width = 6, height = 4)\n```\n:::\n\n\n\n\n# Damage\n\n## Economic losses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsev  = data.frame(sev = seq(20,100, by = 10))\nyield = data.frame(yld = seq(4000,12000,by = 500))\nprice = data.frame(price = seq(100,300, by = 100))\n\ncombined_data <- expand.grid(sev = sev$sev, yld = yield$yld, price = price$price)\n\nylmer_simu_min = combined_data %>% \n  mutate(loss =((((((49.3/9691.0)*sev)*100)*yld)/100)/1000)*price)\n\n\ncustom_labels <- c(\n  \"100\" = \"100 USD/ton\",\n  \"200\" = \"200 USD/ton\",\n  \"300\" = \"300 USD/ton\"\n)\n\n\n heat_loss =ylmer_simu_min %>%\n   filter(price == \"200\") %>% \n  ggplot(aes(sev,yld, fill = loss)) +\n  geom_tile(color = \"white\", size = 0.8) +\n  scale_x_continuous(breaks = seq(20, 100, by = 10)) +\n  scale_y_continuous(breaks = seq(4000, 12000, by = 500)) +\n  scale_fill_viridis_b(option = \"E\", \n                     guide = guide_colorbar(barwidth = 0.3, barheight = 15), \n                     breaks = seq(0, 2000, by = 300))+\n   geom_text(aes(label = as.integer(loss)),\n    size = 3, colour = \"white\")+\n   #facet_wrap(~price, labeller = as_labeller(custom_labels))+\n  theme_minimal_grid(font_size = 14) +\n  labs(\n    y = \"Attainable yield (kg/ha)\",\n    x = \"Disease severity (%)\",\n    fill = \"L (USD/ha)\"\n  )+\n   theme(text = element_text(size = 14),\n     axis.title = element_text(size = 20, face = \"bold\"),\n    strip.text = element_text(size= 14, vjust = -1),\n    #axis.text.y = element_text(hjust = -3),\n    axis.text.x = element_text(vjust = 3),\n    legend.position = \"right\",\n    legend.justification = 0.5,\n    panel.grid = element_blank())\n\nhist_loss = ylmer_simu_min |>\n  filter(price == \"200\") %>% \n  ggplot(aes(loss))+\n  geom_histogram(color = \"white\", fill= \"#1c1c3c\", bins = 15)+\n  facet_wrap(~price)+\n  ggthemes::theme_few() +\n   scale_x_continuous(breaks = seq(0,2100, by = 300)) +\n  labs(\n    y = \"Frequency\",\n    x = \"Economic losses (USD/ha)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank(),\n    strip.text = element_blank() \n  )\n\nloss_200 = ylmer_simu_min |>\n  filter(price == \"200\") \n\nmedian(loss_200$loss)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 447.6731\n```\n\n\n:::\n\n```{.r .cell-code}\nhist_loss = ylmer_simu_min %>% \n  filter(price == \"200\") %>%\nggplot(aes(x = loss)) +\n  stat_halfeye(fill = \"#ffc425\", alpha = 0.7)+\n  geom_vline(aes(xintercept = 447.6731), color = \"#1c1c3c\", linetype = \"dashed\", size = 2) +\n  ggthemes::theme_few() +\n   #scale_x_continuous(breaks = seq(0,2100, by = 100)) +\n  scale_x_continuous(breaks=c(50,150,250,350,450,550,\n                              650,750,850,950,1050,\n                              1150,1250,1350,1450,1550,1650,1750,1850,1950,\n                              2150))+\n  labs(\n    y = \"Density\",\n    x = \"Economic losses (USD/ha)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank(),\n    strip.text = element_blank() \n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Below 25%\n\nsev_loss_b25  = data.frame(sev = seq(5,25, by = 5))\n\ncombined_data_b25 <- expand.grid(sev = sev_loss_b25$sev, yld = yield$yld)\n\nloss_25 = ((((((49.3/9691.0)*25)*combined_data_b25$sev)*combined_data_b25$yld)/100)/1000)*200\n\nmean(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30.52317\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.087194\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.30791\n```\n\n\n:::\n\n```{.r .cell-code}\n# Above 25%\n\nsev_loss_a25  = data.frame(sev = seq(25,100, by = 5))\n\ncombined_data_a25 <- expand.grid(sev = sev_loss_a25$sev, yld = yield$yld)\n\nloss_25 = ((((((49.3/9691.0)*combined_data_a25$sev)*combined_data_a25$sev)*combined_data_a25$yld)/100)/1000)*200\n\nmean(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 361.1908\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25.43597\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(loss_25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1220.927\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(hist_loss+heat_loss) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 24)) \n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\n ggsave(\"fig/loss.png\", bg = \"white\",\n       dpi = 600,height =8, width = 16)\n```\n:::\n\n\n\n## Relative yield\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlmer_slope= lmer_stats %>% \n  filter(parameters == \"Slope\")\n\nlibrary(minpack.lm)\nFx =environment(ecdf(-lmer_slope$estimate))$y\nx = environment(ecdf(-lmer_slope$estimate))$x\n\nslope_reg = nlsLM(Fx ~ pgamma(x, shape, rate,log = FALSE) ,\n      start = c(shape = 2.5, rate = 0.13),\n      control = nls.lm.control(maxiter = 1024))\nsummary(slope_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: Fx ~ pgamma(x, shape, rate, log = FALSE)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)    \nshape 29.25149    0.62746   46.62   <2e-16 ***\nrate   0.58169    0.01255   46.37   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02492 on 198 degrees of freedom\n\nNumber of iterations to convergence: 12 \nAchieved convergence tolerance: 1.49e-08\n```\n\n\n:::\n\n```{.r .cell-code}\nshape_res = summary(slope_reg)$coef[1]\nrate_res = summary(slope_reg)$coef[2]\nks.test(Fx, pgamma(x, shape_res, rate_res))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pgamma(x, shape_res, rate_res)\nD = 0.08, p-value = 0.5441\nalternative hypothesis: two-sided\n```\n\n\n:::\n\n```{.r .cell-code}\nslope_plot = lmer_slope %>% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun=function(x) dgamma(-x, shape_res, rate_res), size = 1.2, color = \"darkblue\")+\n  ggthemes::theme_few()+\n  #facet_wrap(~approach)+\n  labs(x = \"Slope (kg/p.p)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"))\n\n\n\n\nlmer_intercept= lmer_stats %>% \n  filter(parameters == \"Intercept\")\n\nshapiro.test(lmer_slope$estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  lmer_slope$estimate\nW = 0.98551, p-value = 0.03812\n```\n\n\n:::\n\n```{.r .cell-code}\nmean_intercept = mean(lmer_intercept$estimate)\nsd_intercept = sd(lmer_intercept$estimate)\n\nintercept_plot <- lmer_intercept %>% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_intercept, sd = sd_intercept), \n                color = \"darkblue\", size = 1.2, linetype = \"solid\")+\n  ggthemes::theme_few()+\n  #facet_wrap(~approach)+\n  labs(x = \"Intercept (kg/ha)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\n\nu_j <- rnorm(100, mean = 0, sd = random_effect_sd)\n\n#mean_uj = mean(u_j)\n\ndf <- expand.grid(sev = seq(0, 100, by = 1), rep = 1:100)\ndf$yield = 9691.0 - 49.38*df$sev - rep(u_j, each = 101)\ndf$relative <- df$yield *100 / 9691.0\n\ndf2 = df %>% \n  group_by(sev) %>% \n  summarise(mean = mean(relative),\n     up_95 = quantile(relative, 0.975),\n     low_95 = quantile(relative, 0.025))\n\n\n\nrelative_plot = ggplot() +\n  geom_line(data = df, aes(x = sev, y = relative, group = rep), \n            color = \"grey\", alpha = 0.4) +  # Linhas cinzas para cada simulação\n  geom_line(data = df2, aes(x = sev, y = mean), \n            color = \"black\", size = 1.4) +  # Linha média\n  geom_line(data = df2, aes(x = sev, y = up_95), \n            color = \"black\", linetype = \"dashed\",size = 1) +  # IC superior\n  geom_line(data = df2, aes(x = sev, y = low_95), \n            color = \"black\", linetype = \"dashed\",size = 1) +  # IC inferior\n  scale_y_continuous(breaks = c(20,30, 40,50, 60,\n                                70,80,90,100), \n                     limits = c(20, 100),\n                     expand = c(0, 2))+\n  scale_x_continuous(breaks = c(0,10,20,30,40,50,60,70,80,90, 100),\n                     limits = c(0, 100),\n                     expand = c(0, 2))+\n  coord_cartesian(xlim = c(0,100), ylim = c(20,100))+\n  labs(x = \"Disease severity (%)\", y = \"Relative yield (%) \")+\n  geom_hline(yintercept = 87,\n             linetype = 2, color = \"darkblue\", size = 1)+\n  geom_vline(xintercept = c(25), linetype = 2, color = \"darkblue\", size = 1)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.text.x = element_text(size = 10, face = \"bold\"),   \n        axis.text.y = element_text(size = 10, face = \"bold\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n#plot_grid(slope_plot / intercept_plot | relative_plot, ncol = 1,\n #         label_x = -0.02, label_size = 12)\n\n(slope_plot / intercept_plot |relative_plot) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 12))\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/relative_parameters.png\", bg = \"white\", dpi = 600,\n       height = 4, width = 6)\n```\n:::\n\n\n\n# Break-even probability\n\n## Framework simulation\n\n### NORTA function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngera.norm.bid.geral<-function(tamanho.amostra,correlacao,m1,m2,sigma1,sigma2)\n{\n  ro<-correlacao\n  n<-tamanho.amostra\n  x<-matrix(0,n,2)\n  for (i in 1:n)\n  {x[i,1]<-rnorm(1,m1,sigma1)\n  x[i,2]<-rnorm(1,m2+ro*sigma1/sigma2*(x[i,1]-m1),sigma2*(sqrt(1-ro^2)))\n  }\n  return(x)\n}\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 2974524 158.9    4709500 251.6  4709500 251.6\nVcells 5901228  45.1   64744064 494.0 80929908 617.5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nestria2 %>% \n  ggplot(aes(mean_sev))+\n  geom_histogram(color= \"white\", fill = \"black\")+\n  ggthemes::theme_few()\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n### Severity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(minpack.lm)\n  \nsev = simulated_data_lmer$sev\n#sev = estria2$mean_sev\nFx_sev = environment(ecdf(sev))$y\nx_sev = environment(ecdf(sev))$x/100\n\nsummary(nlsLM(Fx_sev ~ pbeta(x_sev, shape1, shape2, log = FALSE) ,\n      start = c(shape1 = 1, shape2 = 1),\n      control = nls.lm.control(maxiter = 100000)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: Fx_sev ~ pbeta(x_sev, shape1, shape2, log = FALSE)\n\nParameters:\n        Estimate Std. Error t value Pr(>|t|)    \nshape1 1.2041125  0.0005694    2115   <2e-16 ***\nshape2 3.6414300  0.0020387    1786   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.004923 on 9998 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.49e-08\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nks.test(Fx_sev,pbeta(x_sev,1.2041125,3.6414300))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx_sev and pbeta(x_sev, 1.2041125, 3.64143)\nD = 0.0111, p-value = 0.5689\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x_sev,Fx_sev)\ncurve(pbeta(x, 1.2041125,3.6414300),0,1, add = T)\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### Intercept\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintercept_bls = regression_trial_m\nintercept_bls[,1] = NULL\n\nmean_intercept = mean(intercept_bls$Intercept)\nsd_intercept = sd(intercept_bls$Intercept)\n\nplot(ecdf(intercept_bls$Intercept))\ncurve(pnorm(x, mean_intercept,sd_intercept), add = T, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nFx_res_b0 = environment(ecdf(intercept_bls$Intercept))$y\nx_res_b0= environment(ecdf(intercept_bls$Intercept))$x\nks.test(Fx_res_b0, pnorm(x_res_b0, mean(intercept_bls$Intercept), sd(intercept_bls$Intercept)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx_res_b0 and pnorm(x_res_b0, mean(intercept_bls$Intercept), sd(intercept_bls$Intercept))\nD = 0.045, p-value = 0.9874\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n### Slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslope_bls = regression_trial_m\nslope_bls[,2] = NULL\n  \n\nmean_slope = mean(slope_bls$Slope)\nsd_slope = sd(slope_bls$Slope)\n\nplot(ecdf(slope_bls$Slope))\ncurve(pnorm(x, mean_slope, sd_slope), add = T, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(minpack.lm)\nFx =environment(ecdf(-slope_bls$Slope))$y\nx = environment(ecdf(-slope_bls$Slope))$x\n\nslope_reg = nlsLM(Fx ~ pgamma(x, shape, rate,log = FALSE) ,\n      start = c(shape = 2.5, rate = 0.13),\n      control = nls.lm.control(maxiter = 1024))\nsummary(slope_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: Fx ~ pgamma(x, shape, rate, log = FALSE)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)    \nshape 29.25149    0.62746   46.62   <2e-16 ***\nrate   0.58169    0.01255   46.37   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02492 on 198 degrees of freedom\n\nNumber of iterations to convergence: 12 \nAchieved convergence tolerance: 1.49e-08\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshape = summary(slope_reg)$coef[1]\nrate = summary(slope_reg)$coef[2]\n\nFx =environment(ecdf(-slope_bls$Slope))$y\nx = environment(ecdf(-slope_bls$Slope))$x\nks.test(Fx, pgamma(x, shape, rate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pgamma(x, shape, rate)\nD = 0.08, p-value = 0.5441\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(regression_trial_m$Slope,regression_trial_m$Intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.1547164\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nj_res<-gera.norm.bid.geral(10000,0.15,0,0,1,1)\n\nplot(j_res[,1],j_res[,2])\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n### Corn price\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorn = gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1LcLVKb6bW7tVaiu6reLsT8sjFR1hwUcembZ7uxAoBP8/edit?usp=sharing\") \n\ncorn = corn %>%\n  filter(state %in% c(\"PR\")) %>% \n  filter(year <= 2019)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbls_price = corn %>%\n  #filter(year <= 2019) %>%\n  mutate(price = (price/60)/4)\nbls_price\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 5\n   data    price national  year state\n   <chr>   <dbl>    <dbl> <dbl> <chr>\n 1 12/2019 0.152     37.3  2019 PR   \n 2 11/2019 0.141     34.8  2019 PR   \n 3 10/2019 0.131     32.7  2019 PR   \n 4 9/2019  0.119     30.9  2019 PR   \n 5 8/2019  0.121     30.8  2019 PR   \n 6 7/2019  0.126     31.0  2019 PR   \n 7 6/2019  0.124     30.4  2019 PR   \n 8 5/2019  0.112     29.4  2019 PR   \n 9 4/2019  0.120     31.1  2019 PR   \n10 3/2019  0.132     32.1  2019 PR   \n# ℹ 26 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.07679167\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1153426\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1153426\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.12\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0198195\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbls_price %>% \n  ggplot(aes(price))+\n  geom_histogram(fill = \"steelblue\", color = \"white\", bins = 10)+\n ggthemes::theme_few()+\n  labs(x = \"Soybean prince\",\n       y = \"Frequency\")+\n  scale_x_continuous(breaks = seq(0,1,by=0.025))+\n  theme(text = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist((bls_price$price), prob = T)\ncurve(dnorm(x, mean(bls_price$price), sd(bls_price$price)),0.15,0.35, add = T)\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ecdf(bls_price$price))\ncurve(pnorm(x, mean(bls_price$price), sd(bls_price$price)),0.2,0.35, add = T)\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1153426\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(bls_price$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  bls_price$price\nW = 0.94849, p-value = 0.0937\n```\n\n\n:::\n:::\n\n\n\n#### Kolmogorov-Smirnov Test\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFx = environment(ecdf(bls_price$price))$y\nx= environment(ecdf(bls_price$price))$x\nks.test(Fx, pnorm(x, mean(bls_price$price), sd(bls_price$price)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tExact two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pnorm(x, mean(bls_price$price), sd(bls_price$price))\nD = 0.13889, p-value = 0.8849\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Fx, pnorm(x, mean(bls_price$price), sd(bls_price$price)))\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\n#### Vizualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_plot = bls_price %>% \n  ggplot(aes(price))+\n geom_histogram(aes(y = ..density..),bins = 10, color = \"white\", fill = \"black\")+ #\"#1C8C20\"\n   #stat_function(fun=function(x) dnorm(x, mean(sbr_price$price), sd(sbr_price$price)), color= \"black\", size = 1.2)+\n  ggthemes::theme_few()+\n  labs(x=\"Soybean price (USD/kg)\", y = \"Frequency\")+\n  scale_x_continuous(breaks = seq(0,1,by=0.025))+\ntheme(text = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\")\nprice_plot\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  ggsave(\"fig/soybean_price.png\", bg = \"white\",\n       dpi = 600, height = 5, width = 6)\n```\n:::\n\n\n\n## Simulation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nn=40000\nlambda = seq(0,1, by=0.05)\nfun_price = seq(-10, 260, by=15)\nn_aplication = 1\noperational_cost = 10  \n\ncomb_matrix = as.matrix(data.table::CJ(lambda,fun_price))\ncolnames(comb_matrix) = c(\"lambda\",\"fun_price\")\ncomb_matrix = cbind(comb_matrix,operational_cost, n_aplication)\nC = comb_matrix[,\"n_aplication\"]*(comb_matrix[,\"operational_cost\"]+comb_matrix[,\"fun_price\"] )\ncomb_matrix = cbind(comb_matrix,C)\n\nN = length(comb_matrix[,1])*n\nbig_one = matrix(0, ncol = 12, nrow =N)\nbig_one[,1] = rep(comb_matrix[,1],n)\nbig_one[,2] = rep(comb_matrix[,2],n)\nbig_one[,3] = rep(comb_matrix[,3],n)\nbig_one[,4] = rep(comb_matrix[,4],n)\nbig_one[,5] = rep(comb_matrix[,5],n)\n\nset.seed(1)\n\n\nsn = rbeta(N, 1.2041125,3.6414300)\nsf = sn*(1-big_one[,1])\n\n# simulating the coeficientes \n\n\nset.seed(1)\nnormal_correlated<-gera.norm.bid.geral(N,0.15,0,0,1,1)\nb0_n = pnorm(normal_correlated[,2])\nb1_n = pnorm(normal_correlated[,1])\nb0 = qnorm(b0_n, mean_intercept,sd_intercept)\nb1 = -qgamma(b1_n, shape, rate,)\nrm(b0_n,b1_n,normal_correlated)\n\n\n# Calculating the alha coeficient\n\n\nalfa = (b1/b0)*100\n\n# Calculating yield gain\n\n## Moderate Resistant (MR)\n\nyn  = b0 - (-alfa*b0*sn)\nyf  = b0 - (-alfa*b0*sf)\n\n\n# Simulating soybean price\n\nset.seed(1)\nsoy_price = rnorm(N, mean(bls_price$price),sd(bls_price$price))\n\n#income = yield_gain*soy_price # calculating the income\n\nbig_one[,6] = yn\nbig_one[,7] = yf\nbig_one[,8] = b1\nbig_one[,9] = b0\nbig_one[,10] = sn\nbig_one[,11] = sf\nbig_one[,12] = soy_price\ncolnames(big_one)  = c(\"lambda\",\"fun_price\",\"operational_cost\",\"n_aplication\",\"C\",\"yn\",\"yf\",\n                       \"b1\",\"b0\",\"sn\",\"sf\",\"soy_price\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_one_df = as.data.frame(big_one) %>% \n  filter(b0>=0) %>% \n  filter(yn>0) %>% \n  filter(alfa > -3 & alfa < 0) %>%\n  mutate(yield_gain = yf-yn,\n         yield_gain_perc = ((yf/yn)-1)*100,\n         income = yield_gain*soy_price,#0.2\n         CP = C/soy_price,#0.2\n         profit = (income>=C)*1) %>% \n        filter(C <= 180) %>%\n        filter(lambda >= 0.4) %>%\n        filter(lambda <= 0.8)\n\ngc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_csv(big_one_df,\"data/big_one_df.csv\")\nbig_one_df = read_csv(\"data/big_one_df.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsn = big_one_df %>% \n  ggplot(aes(sn))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n  theme(text = element_text(face = \"bold\", size = 14),\n        axis.title = element_text(face = \"bold\",size = 16))+\n  labs(y = \"Frequency\",\n       x = \"BLS severity (%)\")+\n  ggthemes::theme_few()\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2983316 159.4    4709500 251.6  4709500 251.6\nVcells 85523965 652.5  125743788 959.4 85694620 653.8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb0_graphic = big_one_df %>% \n  ggplot(aes(b0))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n   #scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Intercept (kg/ha)\")+\n  ggthemes::theme_few()\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2984033 159.4    4709500 251.6  4709500 251.6\nVcells 85525901 652.6  125743788 959.4 85694620 653.8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb1_graphic = big_one_df %>% \n  ggplot(aes(b1))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n  #scale_x_continuous(breaks = c(-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0), limits = c(-100,0))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Slope (kg/p.p.)\")+\n  ggthemes::theme_few()\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2984764 159.5    4709500 251.6  4709500 251.6\nVcells 85527868 652.6  125743788 959.4 85694620 653.8\n```\n\n\n:::\n\n```{.r .cell-code}\nb1_graphic\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha_graphic = big_one_df %>% \n    filter(C <= 180) %>%\n  filter(lambda >= 0.4) %>%\n  filter(lambda <= 0.8) %>%\n  filter(C >= 60) %>%\n  ggplot(aes(alfa))+\n  geom_histogram(color = \"white\", fill = \"black\", bins = 10)+\n  #scale_x_continuous(breaks = c(-2.0,-1.75,-1.50,-1.25,-1.00,-0.75,-0.50,-0.25,0.0), limits = c(-2.0,0.0))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Yield loss (%/p.p.)\")+\n  ggthemes::theme_few()\n\ngc()\n\nalpha_graphic\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#alpha_res_graphic,alpha_m_sus_graphic,alpha_sus_graphic,\nplot_grid(sn_res_graphic,b0_res_graphic,b1_res_graphic, ncol = 3,  labels = c(\"(a)\", \"(b)\", \"(c)\"),label_x = -0.03)\n\nggsave(\"fig/simulated_variables.png\", dpi = 1000, bg = \"white\",\n       height = 8, width = 12)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nheat <- big_one_df %>%\n  filter(C <= 180) %>%\n  filter(lambda >= 0.4) %>%\n  filter(lambda <= 0.8) %>%\n  filter(C >= 15) %>%\n  group_by(lambda, C) %>%\n  summarise(n = n(), sumn = sum(profit), prob = sumn / n) \n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2984962 159.5    4709500  251.6   4709500  251.6\nVcells 85528931 652.6  261171756 1992.6 261140484 1992.4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nheat_graphic = heat %>% \n  ggplot(aes(as.factor(lambda * 100), as.factor(C), fill = prob)) +\n  geom_tile(size = 0.5, color = \"white\") +\n  scale_fill_viridis_b(option = \"D\", direction = -1) +\n  scale_color_manual(values = c(\"#E60E00\", \"#55E344\")) +\n  guides(color = guide_legend(override.aes = list(size = 2))) +\n  labs(x = \"Fungicide efficacy (%)\",\n       y = \"Fungicide + Application cost ($)\",\n       fill = \"Pr(I \\u2265 C)\",\n       color = \"\") +\n # facet_wrap(vars(class, class2)) +\n  ggthemes::theme_few()+\n  theme(strip.text = element_text(face = \"bold\", size = 14),\n        text = element_text(face = \"bold\", size = 14))\n\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2987874 159.6    4709500  251.6   4709500  251.6\nVcells 85534019 652.6  261171756 1992.6 261140484 1992.4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbig = big_one_df %>%\n   mutate(class = case_when(sn > 0.25 ~ \"High severity\",\n                           sn <= 0.25 ~\"Low severity\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass <- big %>%\n  filter(C <= 105) %>%\n  filter(lambda >= 0.4) %>%\n  filter(lambda <= 0.8) %>%\n  filter(C >= 15) %>%\n  group_by(lambda, C, class) %>%\n  summarise(n = n(), sumn = sum(profit), prob = sumn / n, .groups = 'drop') %>%\n  ungroup()  \n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2987922 159.6    4709500  251.6   4709500  251.6\nVcells 90214898 688.3  261171756 1992.6 261166559 1992.6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\nheat_graphic = class %>% \n  filter(!is.na(class)) %>% \n  ggplot( aes(as.factor(lambda * 100), as.factor(C), fill = prob)) +\n  geom_tile(size = 0.5, color = \"white\") +\n  #geom_text(aes(label = paste(round(prob, 2), sep = \"\")),\n   # size = 4, colour = \"white\")+\n  scale_fill_viridis_b(option = \"E\", direction =  -1)+\n  #scale_fill_viridis(discrete = T, option = \"E\") +\n  guides(color = guide_legend(override.aes = list(size = 2))) +\n  labs(x = \"Treatment efficacy (%)\",\n       y = \"Treatment cost (USD/ha)\",\n       fill = \"Pr(I \\u2265 C)\",\n       color = \"\") +\n  facet_wrap(vars(class), ncol =1) +\n  ggthemes::theme_few()+\n  theme(strip.text = element_text(face = \"bold\", size = 14),\n        text = element_text(face = \"bold\", size = 14),\n        legend.position = \"right\")\n\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2989381 159.7    4709500  251.6   4709500  251.6\nVcells 90218335 688.4  261171756 1992.6 261166559 1992.6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlow_class = class %>% \n  filter(class == \"Low severity\")\n\nmin(low_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0002628466\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(low_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8714784\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(low_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3308383\n```\n\n\n:::\n\n```{.r .cell-code}\nlow_class %>% \n  filter(C <= 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 6\n  lambda     C class            n  sumn  prob\n   <dbl> <dbl> <chr>        <int> <dbl> <dbl>\n1   0.4     15 Low severity 22820 16468 0.722\n2   0.45    15 Low severity 22853 17236 0.754\n3   0.5     15 Low severity 23069 18107 0.785\n4   0.55    15 Low severity 22708 18344 0.808\n5   0.6     15 Low severity 22852 18808 0.823\n6   0.65    15 Low severity 22911 19246 0.840\n7   0.7     15 Low severity 23115 19736 0.854\n8   0.75    15 Low severity 22881 19711 0.861\n9   0.8     15 Low severity 22930 19983 0.871\n```\n\n\n:::\n\n```{.r .cell-code}\nhigh_class = class %>% \n  filter(class == \"High severity\")\n\nmin(high_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3460665\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(high_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(high_class$prob)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9033795\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noverall = big %>%\n  filter(C <= 105) %>%\n  filter(C >= 15) %>%\n  #mutate(sev_class = \" Overall\") %>% \n  dplyr::group_by(lambda,class) %>% \n  summarise(yield_gain_median = median(yield_gain),\n            yield_gain_mean = mean(yield_gain),\n            up_95 = quantile(yield_gain, 0.975),\n            low_95 = quantile(yield_gain, 0.025),\n            up_75 = quantile(yield_gain, 0.75),\n            low_75 = quantile(yield_gain, 0.25)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n gain_graphic = overall %>% \n  ggplot(aes(lambda*100,yield_gain_mean))+\n  geom_line(aes(lambda*100, low_95),\n              linetype = 2,\n            size = 1,\n            fill = NA, color = \"black\")+\n  geom_line(aes(lambda*100, up_95),\n              linetype = 2,\n            size = 1,\n          fill = NA,color = \"black\")+\n  geom_line(size = 1.4, aes(lambda*100,yield_gain_median), color = \"#ffc425\")+\n   #scale_y_continuous(breaks = c(0, 500, 1000, 1500,2000,\n    #                             2500, 3000), \n     #                 limits = c(0, 3000))+\n   #scale_x_continuous(breaks = c(40,50,60,70,80), limits = c(40, 80))+\n  #scale_color_viridis_d()+\n  #scale_color_manual(values = c('steelblue', '#9ccb86', 'darkred'))+\n  ggthemes::theme_few()+\n  facet_wrap(~class, ncol = 1)+\n  #facet_wrap(~class+class2)+\n  labs(x = \"Treatment efficacy (%)\",\n       y = \"Yield difference (kg/ha)\",\n       color = \"Tolerance level\", \n       linetype = \"\", fill = \"\")+\n  theme(text = element_text(face = \"bold\", size = 14),\n        strip.text = element_text(size = 14),\n        legend.position = \"top\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\n\n(gain_graphic+heat_graphic) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 16))\n```\n\n::: {.cell-output-display}\n![](about_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"fig/break-even_gain.png\", dpi = 600, bg = \"white\",\n       width = 8, height = 6)\n```\n:::\n",
    "supporting": [
      "about_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}