[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Packages",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gsheet)\nlibrary(lme4)\nlibrary(cowplot)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(ggdist)"
  },
  {
    "objectID": "about.html#severity",
    "href": "about.html#severity",
    "title": "Packages",
    "section": "Severity",
    "text": "Severity\n\nplot_sev = gls %&gt;% \n  ggplot(aes(sev))+\n  geom_histogram(color = \"white\", fill = \"black\")+\n  #stat_function(fun=function(x) dbeta(x, 0.94145, 6.45601), color= \"darkred\", size = 1.2)+\n  ggthemes::theme_few()+\n  labs(x = \"Disease severity (%)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"))"
  },
  {
    "objectID": "about.html#yield",
    "href": "about.html#yield",
    "title": "Packages",
    "section": "Yield",
    "text": "Yield\n\nyy = gls %&gt;% \n  filter(!yld &lt;= 1500)\n\nmean(gls$yld)\n\n[1] 8965.05\n\nmax(gls$yld)\n\n[1] 13073.42\n\nmin(yy$yld)\n\n[1] 3382.11\n\nquantile(yy$yld)\n\n       0%       25%       50%       75%      100% \n 3382.110  8018.915  8971.835  9844.248 13073.420 \n\n\n\nmean_intercept = mean(gls$yld)\nsd_intercept = sd(gls$yld)\n\nplot_yld = gls %&gt;% \n  filter(!yld &lt;=1000) %&gt;% \n  ggplot(aes(yld))+\ngeom_histogram(fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  scale_x_continuous(breaks = c(4000, 6000,8000,10000,12000, 14000), limits = c(4000, 14000))+\n  ggthemes::theme_few()+\n  labs(x = \"Yield (kg/ha)\",\n       y = \"\")+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"))\n\nplot_yld\n\n\n\n\n\n\n\n\n\nplot_grid(plot_sev, plot_yld, ncol = 2, label_x = -0.03, label_size = 14,\n          labels = c(\"(a)\",\"(b)\"))\n\n\n\n\n\n\n\nggsave(\"fig/sev_yld.png\", bg = \"white\", dpi = 600, \n       width = 8, height = 4)"
  },
  {
    "objectID": "about.html#prepare-data",
    "href": "about.html#prepare-data",
    "title": "Packages",
    "section": "Prepare data",
    "text": "Prepare data\n\nestria2 &lt;- gls |&gt; \n  group_by(trial, hybrid) |&gt; \n  summarise(mean_sev = mean(sev),\n            mean_yld = mean(yld))\n\n\nmax(estria2$mean_sev)\n\n[1] 76.66667\n\nmin(estria2$mean_sev)\n\n[1] 1.333333\n\nmean(estria2$mean_sev)\n\n[1] 13.83716\n\nmedian(estria2$mean_sev)\n\n[1] 9.5\n\nsd(estria2$mean_sev)\n\n[1] 13.12138\n\nmax(estria2$mean_yld)\n\n[1] 12503.86\n\nmin(estria2$mean_yld)\n\n[1] 3909.777\n\nmean(estria2$mean_yld)\n\n[1] 8964.191\n\nmedian(estria2$mean_yld)\n\n[1] 8989.737\n\nsd(estria2$mean_yld)\n\n[1] 1359.003"
  },
  {
    "objectID": "about.html#visualize",
    "href": "about.html#visualize",
    "title": "Packages",
    "section": "Visualize",
    "text": "Visualize\n\nestria2 = estria2 %&gt;% \n  mutate(\n    period = case_when(trial == \"2018_1\"~ \"2018/1\",\n                       trial == \"2018_2\" ~\"2018/2\",\n                       trial == \"2018_19\"~\"2018/2019\",\n                       trial == \"2019_1\" ~\"2019/1\"))\nlibrary(ggthemes)\n\n trials = estria2 |&gt;\n  ggplot(aes(mean_sev, mean_yld, group = as.factor(period),color = as.factor(period)))+ #\n  geom_point()+\n  #facet_wrap(~period)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2)+\n  scale_color_viridis_d()+\n  theme_minimal()+\n   scale_y_continuous(breaks = c(4000, 5000,6000,7000,8000,9000,10000,11000,12000), \n                     limits = c(4000, 12000))+\n  theme_few()+\n  labs(x = \"Disease severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Seasons\")+\n  theme(text = element_text(size = 12, face = \"bold\"),\n        legend.position = \"none\")\n  #geom_abline(slope = -49.3, intercept = 9714, linetype = 1, linewidth =2, color = \"gray50\")\n\nggsave(\"fig/trials.png\", bg = \"white\", dpi = 600, \n       width = 6, height = 4)\n\n\nlibrary(broom)\nlmer_stats = estria2 %&gt;%\n  #group_by(year) %&gt;%\n  dplyr::select(trial, mean_yld,mean_sev) %&gt;%\n  group_by(trial) %&gt;%\n  do({\n    model &lt;- lm(.$mean_yld ~ .$mean_sev)\n    tidy_model &lt;- tidy(model)\n    confint_model &lt;- confint(model)  # Calcula os intervalos de confiança\n    bind_cols(tidy_model, confint_model)\n  })\n\n\n\n\nlmer_stats = lmer_stats |&gt; \nfilter(term %in% c(\"(Intercept)\",\".$mean_sev\"))\n \nlmer_stats[lmer_stats$term== \"(Intercept)\",c(\"parameters\")] &lt;- \"Intercept\"\nlmer_stats[lmer_stats$term== \".$mean_sev\",c(\"parameters\")] &lt;- \"Slope\"\n\ni &lt;- 1\n while (i &lt;= nrow(lmer_stats)) {\n  if (lmer_stats$parameters[i] == \"Slope\" && lmer_stats$estimate[i] &gt; 0) {\n    # Remove a linha do Slope e a linha do Intercept correspondente\n    lmer_stats &lt;- lmer_stats[-c(i, i - 1), ]\n    # Atualiza o índice, pois duas linhas foram removidas\n    i &lt;- i - 2\n  }\n  i &lt;- i + 1\n }\nlmer_stats\n\n\n  \n\n\nslope_trial_m= lmer_stats |&gt; \n  filter(parameters == \"Slope\") %&gt;% \n  summarise(\n    Slope = estimate\n  )\n\nslope_trial_m[,1] = NULL\n\nslope_trial_m |&gt; \n  filter(!Slope == \"NA\") |&gt; \n  summarise(\nmean = mean(Slope))\n\n\n  \n\n\nintercept_trial_m = lmer_stats |&gt; \n  filter(parameters == \"Intercept\") %&gt;%  \n  summarise(\n    Intercept = estimate\n  )\nintercept_trial_m[,1] = NULL\n\nmean(intercept_trial_m$Intercept)\n\n[1] 9711.667\n\nregression_trial_m = cbind(slope_trial_m,intercept_trial_m)\nregression_trial_m[,3] = NULL\n\nsummary_stats &lt;- regression_trial_m %&gt;%\n  reframe(\n    mean_intercept = mean(Intercept),\n    mean_slope = mean(Slope),\n    ci_intercept_lower = quantile(Intercept, 0.025),\n    ci_intercept_upper = quantile(Intercept, 0.975),\n    ci_slope_lower = quantile(Slope, 0.025),\n    ci_slope_upper = quantile(Slope, 0.975)\n  )\n\ntrials = estria2|&gt; \n ggplot(aes(mean_sev, y = mean_yld)) +\n  geom_point(color = \"NA\")+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  geom_abline(data =regression_trial_m, aes(slope = Slope, intercept = Intercept), size = 1,\n              alpha = 0.5, color = \"grey\")+##9ccb86\n  #geom_abline(data =summary_stats, aes(slope = mean_slope, intercept = mean_intercept),\n   #           size = 1.5, fill = \"black\", color = \"black\")+\ngeom_abline(data = summary_stats,aes(intercept = ci_intercept_lower,slope = ci_slope_lower) ,\n              size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(data = summary_stats, aes(intercept = ci_intercept_upper,slope = ci_slope_upper), size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(aes(slope = -49.37, intercept = 9714.0),\n              size = 1.5, fill = \"black\", color = \"black\")+\ngeom_abline(aes(intercept = 8699.1,slope = -60.59) ,\n              size = .51, linetype = 2)+\n  geom_abline(aes(intercept = 10733.8,slope = -38.00), size = .51, linetype = 2)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"),\n        legend.position = \"none\")+\n  labs(x = \"Disease severity (%)\", y = \"Attainable yield (kg/ha)\",\n       title = \"\")\n\n\nfirst_plot = estria2 |&gt; \n  filter(trial == \"2018_1\") %&gt;% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nsecond_plot = estria2 |&gt; \n  filter(trial == \"2018_2\") %&gt;% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nthird_plot = estria2 |&gt; \n  filter(trial == \"2018_19\") %&gt;% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nfourth_plot = estria2 |&gt; \n  filter(trial == \"2019_1\") %&gt;% \n  ggplot(aes(mean_sev, mean_yld))+ #, group = trial, color = trial\n  geom_point()+\n  facet_wrap(~trial)+\n  geom_smooth(method = \"lm\", se = FALSE, size = 2, color = \"black\")+\n  scale_x_continuous(breaks = c(0, 20, 40,60,80), limits = c(0, 80))+\n  scale_y_continuous(breaks = c(5000, 7500, 10000,12500), limits = c(5000, 12500))+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Yield (kg/ha)\",\n       color = \"Trial\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlibrary(patchwork)\n\ncombined_plot &lt;- (first_plot | plot_yld | second_plot) / \n                 (third_plot | plot_sev | fourth_plot) +\n                 plot_layout(widths = c(2, 10, 2), heights = c(1, 1))\ncombined_plot\n\n\n\n\n\n\n\nggsave(\"fig/plot_all.png\", bg = \"white\", width = 10, height = 8)"
  },
  {
    "objectID": "about.html#plotting",
    "href": "about.html#plotting",
    "title": "Packages",
    "section": "Plotting",
    "text": "Plotting\n\nlibrary(broom)\nlmer_stats = simulated_data_lmer %&gt;%\n  #group_by(year) %&gt;%\n  dplyr::select(experiment, yld,sev) %&gt;%\n  group_by(experiment) %&gt;%\n  do({\n    model &lt;- lm(.$yld ~ .$sev)\n    tidy_model &lt;- tidy(model)\n    confint_model &lt;- confint(model)  # Calcula os intervalos de confiança\n    bind_cols(tidy_model, confint_model)\n  })\n\n\n\n\nlmer_stats = lmer_stats |&gt; \nfilter(term %in% c(\"(Intercept)\",\".$sev\"))\n \nlmer_stats[lmer_stats$term== \"(Intercept)\",c(\"parameters\")] &lt;- \"Intercept\"\nlmer_stats[lmer_stats$term== \".$sev\",c(\"parameters\")] &lt;- \"Slope\"\n\ni &lt;- 1\n while (i &lt;= nrow(lmer_stats)) {\n  if (lmer_stats$parameters[i] == \"Slope\" && lmer_stats$estimate[i] &gt; 0) {\n    # Remove a linha do Slope e a linha do Intercept correspondente\n    lmer_stats &lt;- lmer_stats[-c(i, i - 1), ]\n    # Atualiza o índice, pois duas linhas foram removidas\n    i &lt;- i - 2\n  }\n  i &lt;- i + 1\n }\nlmer_stats\n\n\n  \n\n\nslope_trial_m= lmer_stats |&gt; \n  filter(parameters == \"Slope\") %&gt;% \n  summarise(\n    Slope = estimate\n  )\n\nslope_trial_m[,1] = NULL\n\nslope_trial_m |&gt; \n  filter(!Slope == \"NA\") |&gt; \n  summarise(\nmean = mean(Slope))\n\n\n  \n\n\nintercept_trial_m = lmer_stats |&gt; \n  filter(parameters == \"Intercept\") %&gt;%  \n  summarise(\n    Intercept = estimate\n  )\nintercept_trial_m[,1] = NULL\n\nmean(intercept_trial_m$Intercept)\n\n[1] 9692.539\n\nregression_trial_m = cbind(slope_trial_m,intercept_trial_m)\nregression_trial_m[,3] = NULL\n\nsummary_stats &lt;- regression_trial_m %&gt;%\n  reframe(\n    mean_intercept = mean(Intercept),\n    mean_slope = mean(Slope),\n    ci_intercept_lower = quantile(Intercept, 0.025),\n    ci_intercept_upper = quantile(Intercept, 0.975),\n    ci_slope_lower = quantile(Slope, 0.025),\n    ci_slope_upper = quantile(Slope, 0.975)\n  )\n\nlmer_plot = simulated_data_lmer|&gt; \n ggplot(aes(sev, y = yld)) +\n  geom_point(color = \"NA\")+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  geom_abline(data =regression_trial_m, aes(slope = Slope, intercept = Intercept), size = 1,\n              alpha = 0.5, color = \"grey\")+##9ccb86\n#  geom_abline(data =summary_stats, aes(slope = mean_slope, intercept = mean_intercept),\n #             size = 1.5, fill = \"black\", color = \"black\")+\n  geom_abline(data = summary_stats,aes(intercept = ci_intercept_lower,slope = ci_slope_lower) ,\n              size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline(data = summary_stats, aes(intercept = ci_intercept_upper,slope = ci_slope_upper), size = 1.5, linetype = 2, fill = \"grey\", color = \"grey\")+\n  geom_abline( aes(slope = -49.38, intercept = 9691.0),\n              size = 1.5, fill = \"black\", color = \"black\")+\n  geom_abline(aes(intercept = 9555.81,slope = -50.65) ,\n              size = .51, linetype = 2)+\n  geom_abline(aes(intercept = 9826.19,slope = -48.12), size = .51, linetype = 2)+\n   ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 10, face = \"bold\"),\n        legend.position = \"none\")+\n  labs(x = \"Disease severity (%)\", y = \"\",\n       title = \"\")\n\nlmer_plot"
  },
  {
    "objectID": "about.html#joining",
    "href": "about.html#joining",
    "title": "Packages",
    "section": "Joining",
    "text": "Joining\n\nplot_grid(trials,lmer_plot,plot_sev, plot_yld, labels = c(\"(a)\",\"(b)\",\"(c)\",\"(d)\"), ncol = 2,\n          label_size = 10, label_x = -0.01)\n\n\n\n\n\n\n\nggsave(\"fig/obs_simu_model.png\", bg = \"white\", dpi = 600,width = 6, height = 4)\n\n\ncor(estria2$mean_sev, estria2$mean_yld)\n\n[1] -0.4051456\n\ncor(simulated_data_lmer$sev, simulated_data_lmer$yld)\n\n[1] -0.5508678"
  },
  {
    "objectID": "about.html#visualization",
    "href": "about.html#visualization",
    "title": "Packages",
    "section": "Visualization",
    "text": "Visualization\n\nSimulated\n\n# Extrair os resíduos e quantis teóricos\nlmer_residuals &lt;- residuals(simu_model_lmer, type = \"deviance\")\nlmer_qq_data &lt;- data.frame(\n  theoretical = qqnorm(lmer_residuals, plot.it = FALSE)$x*1000,\n  residuals = qqnorm(lmer_residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nlmer_qq = lmer_qq_data %&gt;% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Theoretical Quantiles\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlmer_qq\n\n\n\n\n\n\n\n\n\n# Extrair preditores lineares e resíduos\nlmer_linear_predictors &lt;- predict(simu_model_lmer, type = \"link\")\nlmer_residuals_data &lt;- data.frame(\n  linear_predictors = lmer_linear_predictors,\n  residuals = lmer_residuals\n)\n\n# Plotar resíduos vs preditores lineares\nlmer_predictors = lmer_residuals_data %&gt;% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Linear Predictors\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n# Calcular média e desvio-padrão dos resíduos\nmean_res &lt;- mean(lmer_residuals_data$residuals)\nsd_res &lt;- sd(lmer_residuals_data$residuals)\n\n# Plotar o histograma e a curva acumulada normal\nlmer_res_hist &lt;- ggplot(lmer_residuals_data, aes(x = residuals)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_res, sd = sd_res), \n                color = \"darkred\", size = 1.2, linetype = \"solid\") + # Adiciona a curva normal\n  scale_x_continuous(breaks = c(-2500, -1250, 0, 1250, 2500), \n                     limits = c(-2500, 2500)) +\n  labs(x = \"Deviance Residuals\", y = \"\") +\n  ggthemes::theme_few() +\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n# Exibir o gráfico\nlmer_res_hist\n\n\n\n\n\n\n\n\n\n# Extrair valores observados e preditos\nlmer_observed &lt;- simulated_data_lmer$yld\nlmer_predicted &lt;- predict(simu_model_lmer, type = \"response\")\nlmer_prediction_data &lt;- data.frame(\n  observed = lmer_observed,\n  predicted = lmer_predicted\n)\n\n# Plotar valores preditos vs observados\nlmer_pd_ob = lmer_prediction_data %&gt;% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  labs(x = \"Observed\", y = \"\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nlmer_pd_ob\n\n\n\n\n\n\n\nmax(lmer_prediction_data$predicted)\n\n[1] 12122.53\n\n\n\n\nObserved\n\n# Extrair os resíduos e quantis teóricos\nobs_lmer_residuals &lt;- residuals(obs_model_lmer, type = \"deviance\")\nobs_lmer_qq_data &lt;- data.frame(\n  theoretical = qqnorm(obs_lmer_residuals, plot.it = FALSE)$x*1000,\n  residuals = qqnorm(obs_lmer_residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nobs_lmer_qq = obs_lmer_qq_data %&gt;% \n  filter(!residuals &lt; -2000) %&gt;% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n   scale_x_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Theoretical Quantiles\", y = \"Dev. Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nobs_lmer_qq\n\n\n\n\n\n\n\n\n\n# Extrair preditores lineares e resíduos\nobs_lmer_linear_predictors &lt;- predict(obs_model_lmer, type = \"link\")\nobs_lmer_residuals_data &lt;- data.frame(\n  linear_predictors = obs_lmer_linear_predictors,\n  residuals = obs_lmer_residuals\n)\n\n# Plotar resíduos vs preditores lineares\nobs_lmer_predictors = obs_lmer_residuals_data %&gt;%\n  filter(!residuals &lt; -2000) %&gt;% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(-3000,-2000,-1000,0,1000,2000,3000), \n                     limits = c(-3000, 3000))+\n  labs(x = \"Linear Predictors\", y = \"Dev. Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n# Calcular média e desvio-padrão dos resíduos\nmean_res &lt;- mean(obs_lmer_residuals_data$residuals)\nsd_res &lt;- sd(obs_lmer_residuals_data$residuals)\n\n# Plotar o histograma e a curva acumulada normal\nobs_lmer_res_hist &lt;- ggplot(obs_lmer_residuals_data, aes(x = residuals)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_res, sd = sd_res), \n                color = \"darkred\", size = 1.2, linetype = \"solid\") + # Adiciona a curva normal\n  scale_x_continuous(breaks = c(-2500, -1250, 0, 1250, 2500), \n                     limits = c(-2500, 2500)) +\n  labs(x = \"Deviance Residuals\", y = \"Frequency\") +\n  ggthemes::theme_few() +\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n# Exibir o gráfico\nobs_lmer_res_hist\n\n\n\n\n\n\n\n\n\n# Extrair valores observados e preditos\nobs_lmer_observed &lt;- estria2$mean_yld\nobs_lmer_predicted &lt;- predict(obs_model_lmer, type = \"response\")\nobs_lmer_prediction_data &lt;- data.frame(\n  observed = obs_lmer_observed,\n  predicted = obs_lmer_predicted\n)\n\n# Plotar valores preditos vs observados\nobs_lmer_pd_ob = obs_lmer_prediction_data %&gt;% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  scale_y_continuous(breaks = c(4000,6000,8000,10000,12000), \n                     limits = c(4000, 12000))+\n  labs(x = \"Observed\", y = \"Predicted\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\nobs_lmer_pd_ob\n\n\n\n\n\n\n\n\n\n\nPlotting\n\n#plot_grid(obs_lmer_pd_ob,lmer_pd_ob,\n #         obs_lmer_qq,lmer_qq,\n  #        obs_lmer_predictors,lmer_predictors,\n   #       obs_lmer_res_hist,lmer_res_hist, ncol = 2, labels = c(\"a\"),\n    #      label_x = -0.01,label_y = 0.01)\n\n(obs_lmer_pd_ob | lmer_pd_ob) / \n(obs_lmer_qq | lmer_qq) / \n(obs_lmer_predictors | lmer_predictors) / \n(obs_lmer_res_hist | lmer_res_hist) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\") &\n  theme(plot.tag = element_text(face = \"bold\", size = 14))\n\n\n\n\n\n\n\nggsave(\"fig/lmm_residue.png\", dpi = 600, bg = \"white\", height = 6, width = 8)"
  },
  {
    "objectID": "about.html#economic-losses",
    "href": "about.html#economic-losses",
    "title": "Packages",
    "section": "Economic losses",
    "text": "Economic losses\n\nsev  = data.frame(sev = seq(20,100, by = 10))\nyield = data.frame(yld = seq(4000,12000,by = 500))\nprice = data.frame(price = seq(100,300, by = 100))\n\ncombined_data &lt;- expand.grid(sev = sev$sev, yld = yield$yld, price = price$price)\n\nylmer_simu_min = combined_data %&gt;% \n  mutate(loss =((((((49.3/9691.0)*sev)*100)*yld)/100)/1000)*price)\n\n\ncustom_labels &lt;- c(\n  \"100\" = \"100 USD/ton\",\n  \"200\" = \"200 USD/ton\",\n  \"300\" = \"300 USD/ton\"\n)\n\n\n heat_loss =ylmer_simu_min %&gt;%\n   filter(price == \"200\") %&gt;% \n  ggplot(aes(sev,yld, fill = loss)) +\n  geom_tile(color = \"white\", size = 0.8) +\n  scale_x_continuous(breaks = seq(20, 100, by = 10)) +\n  scale_y_continuous(breaks = seq(4000, 12000, by = 500)) +\n  scale_fill_viridis_b(option = \"E\", \n                     guide = guide_colorbar(barwidth = 0.3, barheight = 15), \n                     breaks = seq(0, 2000, by = 300))+\n   geom_text(aes(label = as.integer(loss)),\n    size = 3, colour = \"white\")+\n   #facet_wrap(~price, labeller = as_labeller(custom_labels))+\n  theme_minimal_grid(font_size = 14) +\n  labs(\n    y = \"Attainable yield (kg/ha)\",\n    x = \"Disease severity (%)\",\n    fill = \"L (USD/ha)\"\n  )+\n   theme(text = element_text(size = 14),\n     axis.title = element_text(size = 20, face = \"bold\"),\n    strip.text = element_text(size= 14, vjust = -1),\n    #axis.text.y = element_text(hjust = -3),\n    axis.text.x = element_text(vjust = 3),\n    legend.position = \"right\",\n    legend.justification = 0.5,\n    panel.grid = element_blank())\n\nhist_loss = ylmer_simu_min |&gt;\n  filter(price == \"200\") %&gt;% \n  ggplot(aes(loss))+\n  geom_histogram(color = \"white\", fill= \"#1c1c3c\", bins = 15)+\n  facet_wrap(~price)+\n  ggthemes::theme_few() +\n   scale_x_continuous(breaks = seq(0,2100, by = 300)) +\n  labs(\n    y = \"Frequency\",\n    x = \"Economic losses (USD/ha)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank(),\n    strip.text = element_blank() \n  )\n\nloss_200 = ylmer_simu_min |&gt;\n  filter(price == \"200\") \n\nmedian(loss_200$loss)\n\n[1] 447.6731\n\nhist_loss = ylmer_simu_min %&gt;% \n  filter(price == \"200\") %&gt;%\nggplot(aes(x = loss)) +\n  stat_halfeye(fill = \"#ffc425\", alpha = 0.7)+\n  geom_vline(aes(xintercept = 447.6731), color = \"#1c1c3c\", linetype = \"dashed\", size = 2) +\n  ggthemes::theme_few() +\n   #scale_x_continuous(breaks = seq(0,2100, by = 100)) +\n  scale_x_continuous(breaks=c(50,150,250,350,450,550,\n                              650,750,850,950,1050,\n                              1150,1250,1350,1450,1550,1650,1750,1850,1950,\n                              2150))+\n  labs(\n    y = \"Density\",\n    x = \"Economic losses (USD/ha)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank(),\n    strip.text = element_blank() \n  )\n\n\n# Below 25%\n\nsev_loss_b25  = data.frame(sev = seq(5,25, by = 5))\n\ncombined_data_b25 &lt;- expand.grid(sev = sev_loss_b25$sev, yld = yield$yld)\n\nloss_25 = ((((((49.3/9691.0)*25)*combined_data_b25$sev)*combined_data_b25$yld)/100)/1000)*200\n\nmean(loss_25)\n\n[1] 30.52317\n\nmin(loss_25)\n\n[1] 5.087194\n\nmax(loss_25)\n\n[1] 76.30791\n\n# Above 25%\n\nsev_loss_a25  = data.frame(sev = seq(25,100, by = 5))\n\ncombined_data_a25 &lt;- expand.grid(sev = sev_loss_a25$sev, yld = yield$yld)\n\nloss_25 = ((((((49.3/9691.0)*combined_data_a25$sev)*combined_data_a25$sev)*combined_data_a25$yld)/100)/1000)*200\n\nmean(loss_25)\n\n[1] 361.1908\n\nmin(loss_25)\n\n[1] 25.43597\n\nmax(loss_25)\n\n[1] 1220.927\n\n\n\n(hist_loss+heat_loss) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 24)) \n\n\n\n\n\n\n\n ggsave(\"fig/loss.png\", bg = \"white\",\n       dpi = 600,height =8, width = 16)"
  },
  {
    "objectID": "about.html#relative-yield",
    "href": "about.html#relative-yield",
    "title": "Packages",
    "section": "Relative yield",
    "text": "Relative yield\n\nlmer_slope= lmer_stats %&gt;% \n  filter(parameters == \"Slope\")\n\nlibrary(minpack.lm)\nFx =environment(ecdf(-lmer_slope$estimate))$y\nx = environment(ecdf(-lmer_slope$estimate))$x\n\nslope_reg = nlsLM(Fx ~ pgamma(x, shape, rate,log = FALSE) ,\n      start = c(shape = 2.5, rate = 0.13),\n      control = nls.lm.control(maxiter = 1024))\nsummary(slope_reg)\n\n\nFormula: Fx ~ pgamma(x, shape, rate, log = FALSE)\n\nParameters:\n      Estimate Std. Error t value Pr(&gt;|t|)    \nshape 29.25149    0.62746   46.62   &lt;2e-16 ***\nrate   0.58169    0.01255   46.37   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02492 on 198 degrees of freedom\n\nNumber of iterations to convergence: 12 \nAchieved convergence tolerance: 1.49e-08\n\nshape_res = summary(slope_reg)$coef[1]\nrate_res = summary(slope_reg)$coef[2]\nks.test(Fx, pgamma(x, shape_res, rate_res))\n\n\n    Asymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pgamma(x, shape_res, rate_res)\nD = 0.08, p-value = 0.5441\nalternative hypothesis: two-sided\n\nslope_plot = lmer_slope %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun=function(x) dgamma(-x, shape_res, rate_res), size = 1.2, color = \"darkblue\")+\n  ggthemes::theme_few()+\n  #facet_wrap(~approach)+\n  labs(x = \"Slope (kg/p.p)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"))\n\n\n\n\nlmer_intercept= lmer_stats %&gt;% \n  filter(parameters == \"Intercept\")\n\nshapiro.test(lmer_slope$estimate)\n\n\n    Shapiro-Wilk normality test\n\ndata:  lmer_slope$estimate\nW = 0.98551, p-value = 0.03812\n\nmean_intercept = mean(lmer_intercept$estimate)\nsd_intercept = sd(lmer_intercept$estimate)\n\nintercept_plot &lt;- lmer_intercept %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(aes(y = ..density..), fill = \"black\", color = \"white\", bins = 20) + # Ajusta para densidade\n  stat_function(fun = dnorm, args = list(mean = mean_intercept, sd = sd_intercept), \n                color = \"darkblue\", size = 1.2, linetype = \"solid\")+\n  ggthemes::theme_few()+\n  #facet_wrap(~approach)+\n  labs(x = \"Intercept (kg/ha)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 10, face = \"bold\"))\n\n\nset.seed(1)\n\nu_j &lt;- rnorm(100, mean = 0, sd = random_effect_sd)\n\n#mean_uj = mean(u_j)\n\ndf &lt;- expand.grid(sev = seq(0, 100, by = 1), rep = 1:100)\ndf$yield = 9691.0 - 49.38*df$sev - rep(u_j, each = 101)\ndf$relative &lt;- df$yield *100 / 9691.0\n\ndf2 = df %&gt;% \n  group_by(sev) %&gt;% \n  summarise(mean = mean(relative),\n     up_95 = quantile(relative, 0.975),\n     low_95 = quantile(relative, 0.025))\n\n\n\nrelative_plot = ggplot() +\n  geom_line(data = df, aes(x = sev, y = relative, group = rep), \n            color = \"grey\", alpha = 0.4) +  # Linhas cinzas para cada simulação\n  geom_line(data = df2, aes(x = sev, y = mean), \n            color = \"black\", size = 1.4) +  # Linha média\n  geom_line(data = df2, aes(x = sev, y = up_95), \n            color = \"black\", linetype = \"dashed\",size = 1) +  # IC superior\n  geom_line(data = df2, aes(x = sev, y = low_95), \n            color = \"black\", linetype = \"dashed\",size = 1) +  # IC inferior\n  scale_y_continuous(breaks = c(20,30, 40,50, 60,\n                                70,80,90,100), \n                     limits = c(20, 100),\n                     expand = c(0, 2))+\n  scale_x_continuous(breaks = c(0,10,20,30,40,50,60,70,80,90, 100),\n                     limits = c(0, 100),\n                     expand = c(0, 2))+\n  coord_cartesian(xlim = c(0,100), ylim = c(20,100))+\n  labs(x = \"Disease severity (%)\", y = \"Relative yield (%) \")+\n  geom_hline(yintercept = 87,\n             linetype = 2, color = \"darkblue\", size = 1)+\n  geom_vline(xintercept = c(25), linetype = 2, color = \"darkblue\", size = 1)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.text.x = element_text(size = 10, face = \"bold\"),   \n        axis.text.y = element_text(size = 10, face = \"bold\"))\n\n\nlibrary(patchwork)\n\n#plot_grid(slope_plot / intercept_plot | relative_plot, ncol = 1,\n #         label_x = -0.02, label_size = 12)\n\n(slope_plot / intercept_plot |relative_plot) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 12))\n\n\n\n\n\n\n\nggsave(\"fig/relative_parameters.png\", bg = \"white\", dpi = 600,\n       height = 4, width = 6)"
  },
  {
    "objectID": "about.html#framework-simulation",
    "href": "about.html#framework-simulation",
    "title": "Packages",
    "section": "Framework simulation",
    "text": "Framework simulation\n\nNORTA function\n\ngera.norm.bid.geral&lt;-function(tamanho.amostra,correlacao,m1,m2,sigma1,sigma2)\n{\n  ro&lt;-correlacao\n  n&lt;-tamanho.amostra\n  x&lt;-matrix(0,n,2)\n  for (i in 1:n)\n  {x[i,1]&lt;-rnorm(1,m1,sigma1)\n  x[i,2]&lt;-rnorm(1,m2+ro*sigma1/sigma2*(x[i,1]-m1),sigma2*(sqrt(1-ro^2)))\n  }\n  return(x)\n}\n\ngc()\n\n          used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 2949079 157.5    4708754 251.5  4708754 251.5\nVcells 5853168  44.7   64697311 493.7 80871135 617.0\n\n\n\nestria2 %&gt;% \n  ggplot(aes(mean_sev))+\n  geom_histogram(color= \"white\", fill = \"black\")+\n  ggthemes::theme_few()\n\n\n\n\n\n\n\n\n\n\nSeverity\n\nlibrary(minpack.lm)\n  \nsev = simulated_data_lmer$sev\n#sev = estria2$mean_sev\nFx_sev = environment(ecdf(sev))$y\nx_sev = environment(ecdf(sev))$x/100\n\nsummary(nlsLM(Fx_sev ~ pbeta(x_sev, shape1, shape2, log = FALSE) ,\n      start = c(shape1 = 1, shape2 = 1),\n      control = nls.lm.control(maxiter = 100000)))\n\n\nFormula: Fx_sev ~ pbeta(x_sev, shape1, shape2, log = FALSE)\n\nParameters:\n        Estimate Std. Error t value Pr(&gt;|t|)    \nshape1 1.2041125  0.0005694    2115   &lt;2e-16 ***\nshape2 3.6414300  0.0020387    1786   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.004923 on 9998 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.49e-08\n\n\n\nks.test(Fx_sev,pbeta(x_sev,1.2041125,3.6414300))\n\n\n    Asymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx_sev and pbeta(x_sev, 1.2041125, 3.64143)\nD = 0.0111, p-value = 0.5689\nalternative hypothesis: two-sided\n\n\n\nplot(x_sev,Fx_sev)\ncurve(pbeta(x, 1.2041125,3.6414300),0,1, add = T)\n\n\n\n\n\n\n\n\n\n\nIntercept\n\nintercept_bls = regression_trial_m\nintercept_bls[,1] = NULL\n\nmean_intercept = mean(intercept_bls$Intercept)\nsd_intercept = sd(intercept_bls$Intercept)\n\nplot(ecdf(intercept_bls$Intercept))\ncurve(pnorm(x, mean_intercept,sd_intercept), add = T, col = \"red\")\n\n\n\n\n\n\n\n\n\nFx_res_b0 = environment(ecdf(intercept_bls$Intercept))$y\nx_res_b0= environment(ecdf(intercept_bls$Intercept))$x\nks.test(Fx_res_b0, pnorm(x_res_b0, mean(intercept_bls$Intercept), sd(intercept_bls$Intercept)))\n\n\n    Asymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx_res_b0 and pnorm(x_res_b0, mean(intercept_bls$Intercept), sd(intercept_bls$Intercept))\nD = 0.045, p-value = 0.9874\nalternative hypothesis: two-sided\n\n\n\n\nSlope\n\nslope_bls = regression_trial_m\nslope_bls[,2] = NULL\n  \n\nmean_slope = mean(slope_bls$Slope)\nsd_slope = sd(slope_bls$Slope)\n\nplot(ecdf(slope_bls$Slope))\ncurve(pnorm(x, mean_slope, sd_slope), add = T, col = \"red\")\n\n\n\n\n\n\n\n\n\nlibrary(minpack.lm)\nFx =environment(ecdf(-slope_bls$Slope))$y\nx = environment(ecdf(-slope_bls$Slope))$x\n\nslope_reg = nlsLM(Fx ~ pgamma(x, shape, rate,log = FALSE) ,\n      start = c(shape = 2.5, rate = 0.13),\n      control = nls.lm.control(maxiter = 1024))\nsummary(slope_reg)\n\n\nFormula: Fx ~ pgamma(x, shape, rate, log = FALSE)\n\nParameters:\n      Estimate Std. Error t value Pr(&gt;|t|)    \nshape 29.25149    0.62746   46.62   &lt;2e-16 ***\nrate   0.58169    0.01255   46.37   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02492 on 198 degrees of freedom\n\nNumber of iterations to convergence: 12 \nAchieved convergence tolerance: 1.49e-08\n\n\n\nshape = summary(slope_reg)$coef[1]\nrate = summary(slope_reg)$coef[2]\n\nFx =environment(ecdf(-slope_bls$Slope))$y\nx = environment(ecdf(-slope_bls$Slope))$x\nks.test(Fx, pgamma(x, shape, rate))\n\n\n    Asymptotic two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pgamma(x, shape, rate)\nD = 0.08, p-value = 0.5441\nalternative hypothesis: two-sided\n\n\n\ncor(regression_trial_m$Slope,regression_trial_m$Intercept)\n\n[1] -0.1547164\n\n\n\nj_res&lt;-gera.norm.bid.geral(10000,0.15,0,0,1,1)\n\nplot(j_res[,1],j_res[,2])\n\n\n\n\n\n\n\n\n\n\nCorn price\n\ncorn = gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1LcLVKb6bW7tVaiu6reLsT8sjFR1hwUcembZ7uxAoBP8/edit?usp=sharing\") \n\ncorn = corn %&gt;%\n  filter(state %in% c(\"PR\")) %&gt;% \n  filter(year &lt;= 2019)\n\n\nbls_price = corn %&gt;%\n  #filter(year &lt;= 2019) %&gt;%\n  mutate(price = (price/60)/4)\nbls_price\n\n\n  \n\n\nmin(bls_price$price)\n\n[1] 0.07679167\n\nmean(bls_price$price)\n\n[1] 0.1153426\n\n\n\nmean(bls_price$price)\n\n[1] 0.1153426\n\nmedian(bls_price$price)\n\n[1] 0.12\n\nsd(bls_price$price)\n\n[1] 0.0198195\n\n\n\nbls_price %&gt;% \n  ggplot(aes(price))+\n  geom_histogram(fill = \"steelblue\", color = \"white\", bins = 10)+\n ggthemes::theme_few()+\n  labs(x = \"Soybean prince\",\n       y = \"Frequency\")+\n  scale_x_continuous(breaks = seq(0,1,by=0.025))+\n  theme(text = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nhist((bls_price$price), prob = T)\ncurve(dnorm(x, mean(bls_price$price), sd(bls_price$price)),0.15,0.35, add = T)\n\n\n\n\n\n\n\n\n\nplot(ecdf(bls_price$price))\ncurve(pnorm(x, mean(bls_price$price), sd(bls_price$price)),0.2,0.35, add = T)\n\n\n\n\n\n\n\n\n\nmean(bls_price$price)\n\n[1] 0.1153426\n\nmedian(bls_price$price)\n\n[1] 0.12\n\n\n\nshapiro.test(bls_price$price)\n\n\n    Shapiro-Wilk normality test\n\ndata:  bls_price$price\nW = 0.94849, p-value = 0.0937\n\n\n\nKolmogorov-Smirnov Test\n\nFx = environment(ecdf(bls_price$price))$y\nx= environment(ecdf(bls_price$price))$x\nks.test(Fx, pnorm(x, mean(bls_price$price), sd(bls_price$price)))\n\n\n    Exact two-sample Kolmogorov-Smirnov test\n\ndata:  Fx and pnorm(x, mean(bls_price$price), sd(bls_price$price))\nD = 0.13889, p-value = 0.8849\nalternative hypothesis: two-sided\n\n\n\nplot(Fx, pnorm(x, mean(bls_price$price), sd(bls_price$price)))\n\n\n\n\n\n\n\n\n\n\nVizualization\n\nprice_plot = bls_price %&gt;% \n  ggplot(aes(price))+\n geom_histogram(aes(y = ..density..),bins = 10, color = \"white\", fill = \"black\")+ #\"#1C8C20\"\n   #stat_function(fun=function(x) dnorm(x, mean(sbr_price$price), sd(sbr_price$price)), color= \"black\", size = 1.2)+\n  ggthemes::theme_few()+\n  labs(x=\"Soybean price (USD/kg)\", y = \"Frequency\")+\n  scale_x_continuous(breaks = seq(0,1,by=0.025))+\ntheme(text = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\")\nprice_plot\n\n\n\n\n\n\n\n  ggsave(\"fig/soybean_price.png\", bg = \"white\",\n       dpi = 600, height = 5, width = 6)"
  },
  {
    "objectID": "about.html#simulation",
    "href": "about.html#simulation",
    "title": "Packages",
    "section": "Simulation",
    "text": "Simulation\n\nset.seed(1)\nn=40000\nlambda = seq(0,1, by=0.05)\nfun_price = seq(-10, 260, by=15)\nn_aplication = 1\noperational_cost = 10  \n\ncomb_matrix = as.matrix(data.table::CJ(lambda,fun_price))\ncolnames(comb_matrix) = c(\"lambda\",\"fun_price\")\ncomb_matrix = cbind(comb_matrix,operational_cost, n_aplication)\nC = comb_matrix[,\"n_aplication\"]*(comb_matrix[,\"operational_cost\"]+comb_matrix[,\"fun_price\"] )\ncomb_matrix = cbind(comb_matrix,C)\n\nN = length(comb_matrix[,1])*n\nbig_one = matrix(0, ncol = 12, nrow =N)\nbig_one[,1] = rep(comb_matrix[,1],n)\nbig_one[,2] = rep(comb_matrix[,2],n)\nbig_one[,3] = rep(comb_matrix[,3],n)\nbig_one[,4] = rep(comb_matrix[,4],n)\nbig_one[,5] = rep(comb_matrix[,5],n)\n\nset.seed(1)\n\n\nsn = rbeta(N, 1.2041125,3.6414300)\nsf = sn*(1-big_one[,1])\n\n# simulating the coeficientes \n\n\nset.seed(1)\nnormal_correlated&lt;-gera.norm.bid.geral(N,0.15,0,0,1,1)\nb0_n = pnorm(normal_correlated[,2])\nb1_n = pnorm(normal_correlated[,1])\nb0 = qnorm(b0_n, mean_intercept,sd_intercept)\nb1 = -qgamma(b1_n, shape, rate,)\nrm(b0_n,b1_n,normal_correlated)\n\n\n# Calculating the alha coeficient\n\n\nalfa = (b1/b0)*100\n\n# Calculating yield gain\n\n## Moderate Resistant (MR)\n\nyn  = b0 - (-alfa*b0*sn)\nyf  = b0 - (-alfa*b0*sf)\n\n\n# Simulating soybean price\n\nset.seed(1)\nsoy_price = rnorm(N, mean(bls_price$price),sd(bls_price$price))\n\n#income = yield_gain*soy_price # calculating the income\n\nbig_one[,6] = yn\nbig_one[,7] = yf\nbig_one[,8] = b1\nbig_one[,9] = b0\nbig_one[,10] = sn\nbig_one[,11] = sf\nbig_one[,12] = soy_price\ncolnames(big_one)  = c(\"lambda\",\"fun_price\",\"operational_cost\",\"n_aplication\",\"C\",\"yn\",\"yf\",\n                       \"b1\",\"b0\",\"sn\",\"sf\",\"soy_price\")\n\n\nbig_one_df = as.data.frame(big_one) %&gt;% \n  filter(b0&gt;=0) %&gt;% \n  filter(yn&gt;0) %&gt;% \n  filter(alfa &gt; -3 & alfa &lt; 0) %&gt;%\n  mutate(yield_gain = yf-yn,\n         yield_gain_perc = ((yf/yn)-1)*100,\n         income = yield_gain*soy_price,#0.2\n         CP = C/soy_price,#0.2\n         profit = (income&gt;=C)*1) %&gt;% \n        filter(C &lt;= 180) %&gt;%\n        filter(lambda &gt;= 0.4) %&gt;%\n        filter(lambda &lt;= 0.8)\n\ngc()\n\n\n#write_csv(big_one_df,\"data/big_one_df.csv\")\nbig_one_df = read_csv(\"data/big_one_df.csv\")\n\n\nsn = big_one_df %&gt;% \n  ggplot(aes(sn))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n  theme(text = element_text(face = \"bold\", size = 14),\n        axis.title = element_text(face = \"bold\",size = 16))+\n  labs(y = \"Frequency\",\n       x = \"BLS severity (%)\")+\n  ggthemes::theme_few()\n\ngc()\n\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2957877 158.0    4708754 251.5  4708754 251.5\nVcells 85476209 652.2  125675078 958.9 85646906 653.5\n\n\n\nb0_graphic = big_one_df %&gt;% \n  ggplot(aes(b0))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n   #scale_x_continuous(breaks = c(0,1000,2000,3000,4000,5000,6000,7000), limits = c(0, 7000))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Intercept (kg/ha)\")+\n  ggthemes::theme_few()\n\ngc()\n\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2958594 158.1    4708754 251.5  4708754 251.5\nVcells 85478145 652.2  125675078 958.9 85646906 653.5\n\n\n\nb1_graphic = big_one_df %&gt;% \n  ggplot(aes(b1))+\n  geom_histogram(color = \"white\", fill = \"steelblue\", bins = 10, alpha= .5)+\n  #scale_x_continuous(breaks = c(-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0), limits = c(-100,0))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Slope (kg/p.p.)\")+\n  ggthemes::theme_few()\n\ngc()\n\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  2959325 158.1    4708754 251.5  4708754 251.5\nVcells 85480112 652.2  125675078 958.9 85646906 653.5\n\nb1_graphic\n\n\n\n\n\n\n\n\n\nalpha_graphic = big_one_df %&gt;% \n    filter(C &lt;= 180) %&gt;%\n  filter(lambda &gt;= 0.4) %&gt;%\n  filter(lambda &lt;= 0.8) %&gt;%\n  filter(C &gt;= 60) %&gt;%\n  ggplot(aes(alfa))+\n  geom_histogram(color = \"white\", fill = \"black\", bins = 10)+\n  #scale_x_continuous(breaks = c(-2.0,-1.75,-1.50,-1.25,-1.00,-0.75,-0.50,-0.25,0.0), limits = c(-2.0,0.0))+\n  theme(text = element_text(face = \"bold\", size = 14),\n         axis.title = element_text(size = 16, face = \"bold\"))+\n  labs(y = \"Frequency\",\n       x = \"Yield loss (%/p.p.)\")+\n  ggthemes::theme_few()\n\ngc()\n\nalpha_graphic\n\n\n#alpha_res_graphic,alpha_m_sus_graphic,alpha_sus_graphic,\nplot_grid(sn_res_graphic,b0_res_graphic,b1_res_graphic, ncol = 3,  labels = c(\"(a)\", \"(b)\", \"(c)\"),label_x = -0.03)\n\nggsave(\"fig/simulated_variables.png\", dpi = 1000, bg = \"white\",\n       height = 8, width = 12)\n\n\nheat &lt;- big_one_df %&gt;%\n  filter(C &lt;= 180) %&gt;%\n  filter(lambda &gt;= 0.4) %&gt;%\n  filter(lambda &lt;= 0.8) %&gt;%\n  filter(C &gt;= 15) %&gt;%\n  group_by(lambda, C) %&gt;%\n  summarise(n = n(), sumn = sum(profit), prob = sumn / n) \n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2959523 158.1    4708754  251.5   4708754  251.5\nVcells 85481175 652.2  261029279 1991.5 261024076 1991.5\n\n\n\nheat_graphic = heat %&gt;% \n  ggplot(aes(as.factor(lambda * 100), as.factor(C), fill = prob)) +\n  geom_tile(size = 0.5, color = \"white\") +\n  scale_fill_viridis_b(option = \"D\", direction = -1) +\n  scale_color_manual(values = c(\"#E60E00\", \"#55E344\")) +\n  guides(color = guide_legend(override.aes = list(size = 2))) +\n  labs(x = \"Fungicide efficacy (%)\",\n       y = \"Fungicide + Application cost ($)\",\n       fill = \"Pr(I \\u2265 C)\",\n       color = \"\") +\n # facet_wrap(vars(class, class2)) +\n  ggthemes::theme_few()+\n  theme(strip.text = element_text(face = \"bold\", size = 14),\n        text = element_text(face = \"bold\", size = 14))\n\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2962435 158.3    4708754  251.5   4708754  251.5\nVcells 85486263 652.3  261029279 1991.5 261024076 1991.5\n\n\n\nbig = big_one_df %&gt;%\n   mutate(class = case_when(sn &gt; 0.25 ~ \"High severity\",\n                           sn &lt;= 0.25 ~\"Low severity\"))\n\n\nclass &lt;- big %&gt;%\n  filter(C &lt;= 105) %&gt;%\n  filter(lambda &gt;= 0.4) %&gt;%\n  filter(lambda &lt;= 0.8) %&gt;%\n  filter(C &gt;= 15) %&gt;%\n  group_by(lambda, C, class) %&gt;%\n  summarise(n = n(), sumn = sum(profit), prob = sumn / n, .groups = 'drop') %&gt;%\n  ungroup()  \n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2962483 158.3    4708754  251.5   4708754  251.5\nVcells 90167142 688.0  261029279 1991.5 261024076 1991.5\n\n\n\nlibrary(viridis)\nheat_graphic = class %&gt;% \n  filter(!is.na(class)) %&gt;% \n  ggplot( aes(as.factor(lambda * 100), as.factor(C), fill = prob)) +\n  geom_tile(size = 0.5, color = \"white\") +\n  #geom_text(aes(label = paste(round(prob, 2), sep = \"\")),\n   # size = 4, colour = \"white\")+\n  scale_fill_viridis_b(option = \"E\", direction =  -1)+\n  #scale_fill_viridis(discrete = T, option = \"E\") +\n  guides(color = guide_legend(override.aes = list(size = 2))) +\n  labs(x = \"Treatment efficacy (%)\",\n       y = \"Treatment cost (USD/ha)\",\n       fill = \"Pr(I \\u2265 C)\",\n       color = \"\") +\n  facet_wrap(vars(class), ncol =1) +\n  ggthemes::theme_few()+\n  theme(strip.text = element_text(face = \"bold\", size = 14),\n        text = element_text(face = \"bold\", size = 14),\n        legend.position = \"right\")\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  2963942 158.3    4708754  251.5   4708754  251.5\nVcells 90170579 688.0  261029279 1991.5 261024076 1991.5\n\n\n\nlow_class = class %&gt;% \n  filter(class == \"Low severity\")\n\nmin(low_class$prob)\n\n[1] 0.0002628466\n\nmax(low_class$prob)\n\n[1] 0.8714784\n\nmean(low_class$prob)\n\n[1] 0.3308383\n\nlow_class %&gt;% \n  filter(C &lt;= 15)\n\n\n  \n\n\nhigh_class = class %&gt;% \n  filter(class == \"High severity\")\n\nmin(high_class$prob)\n\n[1] 0.3460665\n\nmax(high_class$prob)\n\n[1] 1\n\nmean(high_class$prob)\n\n[1] 0.9033795\n\n\n\noverall = big %&gt;%\n  filter(C &lt;= 105) %&gt;%\n  filter(C &gt;= 15) %&gt;%\n  #mutate(sev_class = \" Overall\") %&gt;% \n  dplyr::group_by(lambda,class) %&gt;% \n  summarise(yield_gain_median = median(yield_gain),\n            yield_gain_mean = mean(yield_gain),\n            up_95 = quantile(yield_gain, 0.975),\n            low_95 = quantile(yield_gain, 0.025),\n            up_75 = quantile(yield_gain, 0.75),\n            low_75 = quantile(yield_gain, 0.25)) \n\n\n gain_graphic = overall %&gt;% \n  ggplot(aes(lambda*100,yield_gain_mean))+\n  geom_line(aes(lambda*100, low_95),\n              linetype = 2,\n            size = 1,\n            fill = NA, color = \"black\")+\n  geom_line(aes(lambda*100, up_95),\n              linetype = 2,\n            size = 1,\n          fill = NA,color = \"black\")+\n  geom_line(size = 1.4, aes(lambda*100,yield_gain_median), color = \"#ffc425\")+\n   #scale_y_continuous(breaks = c(0, 500, 1000, 1500,2000,\n    #                             2500, 3000), \n     #                 limits = c(0, 3000))+\n   #scale_x_continuous(breaks = c(40,50,60,70,80), limits = c(40, 80))+\n  #scale_color_viridis_d()+\n  #scale_color_manual(values = c('steelblue', '#9ccb86', 'darkred'))+\n  ggthemes::theme_few()+\n  facet_wrap(~class, ncol = 1)+\n  #facet_wrap(~class+class2)+\n  labs(x = \"Treatment efficacy (%)\",\n       y = \"Yield difference (kg/ha)\",\n       color = \"Tolerance level\", \n       linetype = \"\", fill = \"\")+\n  theme(text = element_text(face = \"bold\", size = 14),\n        strip.text = element_text(size = 14),\n        legend.position = \"top\")\n\n\nlibrary(cowplot)\n\n(gain_graphic+heat_graphic) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\")&\n  theme(plot.tag = element_text(face = \"bold\", size = 16))\n\n\n\n\n\n\n\nggsave(\"fig/break-even_gain.png\", dpi = 600, bg = \"white\",\n       width = 8, height = 6)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About\n\nThe dataset was obtained from four field experiments conducted under natural infection conditions of disease, being carried out in the years of 2018 and 2019 at Centro de Pesquisa Agrícola (Copacol) in Cafelândia, Paraná state, Brazil."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Modeling BLS damage",
    "section": "",
    "text": "This website provides easy access to commented R scripts that allows reproducing the analysis of the data from our publication.\nThe dataset was obtained from four field experiments conducted under natural infection conditions of disease, being carried out in the years of 2018 and 2019 at Centro de Pesquisa Agrícola (Copacol) in Cafelândia, Paraná state, Brazil."
  }
]